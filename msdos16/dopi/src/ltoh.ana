module Ltoh
    //	1992	writen by M.Kitamura
    c_name "Str"

*proc BtoH(es.di,al)
    endproc
*proc WtoH(es.di,ax)
    endproc

*proc DWtoH(es.di,dx.ax)
//  dx.axを8桁の16進文字列にする
//  arg dx.ax	値
//  arg es.di	バッファ
//  in	cf  	0:'A'-'F'  1:'a'-'f'
begin
    dx <=> ax
    WtoH es.di,ax
    dx <=> ax
endproc //continue

*proc WtoH(es.di,ax)
//  axを4桁の16進文字列にする
//  arg ax  	値
//  arg es.di	バッファ
//  in	cf  0:'A'-'F'  1:'a'-'f'
begin
    ah <=> al
    BtoH es.di,al
    ah <=> al
endproc //continue

*proc BtoH(es.di,al)
//  alを4桁の16進文字列にする
//  arg al  	値
//  arg es.di	バッファ
//  in	cf  0:'A'-'F'  1:'a'-'f'
begin
    push ax
    push fx
    ah = al
    al >>= 4
    ah &= 0x0f
    ax += 0x3030
    if (ah > '9')
    	ah += 'A' - ('9' + 1)
    	pop  fx
    	push fx
    	if (cf)
    	    ah += 'A' - 'a'
    	fi
    fi
    if (al > '9')
    	al += 'A' - ('9' + 1)
    	pop  fx
    	push fx
    	if (cf)
    	    al += 'A' - 'a'
    	fi
    fi
    rep.inc
    rep.set.w di,ax
    b[di] = '\0'
    pop fx
    pop ax
    ret
endproc


*const LTOH_SGN=0x01, LTOH_LEFT=0x02, LTOH_ZERO=0x04, LTOH_PLUS=0x08
*const LTOH_SMALL=0x10

*proc LtoH(es.di,dx.ax,cl,ch,bl)
//  値を１０進数文字列に変換
//  arg es.di	バッファ 9バイト
//  arg dx.ax	値
//  arg cl  	最小幅(cl <= ch)
//  arg ch  	最大幅(バッファ・サイズ - 1)
//  arg bl  	bit0=0:符号無し      1:符号有り
//  	    	bit1=0:右寄 	     1:左寄
//  	    	bit2=0:空白を埋める  1:'0'を埋める
//  	    	bit3=0:'+'を付けない 1:正数のとき'+'を付ける
//  	    	bit4=0:'A'-'F'	     1:'a'-'f'
//  out es.di	次のアドレス
enter
    save pusha,ax,mode:bx,cx,dx,si,ptr_l:di,ptr_h:es,ds,fx
    local sflg:b,rng:w
    local buf:b(20)

    sflg = 0
    if ((bl & LTOH_SGN) && dx .<. 0)
    	sflg = '-'
    	neg dx.ax
    elsif ((bl & LTOH_PLUS) && (dx != 0 || ax != 0))
    	sflg = '+'
    fi
    if (sflg)
    	if (cl)
    	    --cl
    	fi
    	if (ch)
    	    --ch
    	fi
    fi
    if (ch && cl > ch)
    	cl = ch
    fi
    rng = cx

    bx = ss
    ds = bx
    es.di = ww(bx, &buf)

    if (mode.l & LTOH_SMALL)
    	cf = 1
    else
    	cf = 0
    fi
    DWtoH es.di,dx.ax

    rep.inc
    di = &buf
    cx = 8
    al = '0'
    repe.scan di,al,cx
    ++cx

    // rng chk & set
    dx = rng
    if (dh && cl > dh)
    	cl = dh
    fi
    if (dl && cl < dl)
    	ch = dl
    	ch -= cl
    fi
    bx = 8
    bl -= cl
    si = &buf
    si += bx
    bl = cl
    es.di = ww(ptr_h,ptr_l)
    ax = ' '
    if (mode.l & LTOH_ZERO)
    	if (sflg)
    	    al = sflg
    	    rep.set di,al
    	fi
    	al = '0'
    fi
    if (ch)
    	ah = ch
    	if ((mode.l & LTOH_LEFT) == 0)
    	    cl = ch
    	    ch = 0
    	    rep.set di,al,cx
    	    ah = ch
    	fi
    fi
    if (sflg && al == ' ')
    	al = sflg
    	rep.set di,al
    fi
    cx = bx
    rep.cpy di,si,cx
    if (ah)
    	al = ' '
    	cl = ah
    	ch = 0
    	rep.set di,al,cx
    fi
    b[es:di] = '\0'
    ptr_l = di
    return
endproc

endmodule
