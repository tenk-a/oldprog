submodule GH
	import Subr
	import Dos
	import Lfn
	import Pri
	import Deb

@define	GHT()	GH.T[ds:0]

*proc Open(bx, ax.dx)
enter
	save pusha,ds,es, ret_ax:ax
	cvar dtaAdr:d

	GHT.rdName = ax.dx
	push ds
		ds = ax
		Lfn.Open dx, 0
	|pop  ds
	if (_c_)
		Pri.Fmt "'%Fs' ÇÉIÅ[ÉvÉìÇ≈Ç´Ç‹ÇπÇÒ\N", GHT.rdName
		Dos.EXIT 1
		//ax = 1
	else
		GHT.rdHdl = ax
    	//ax = 0
    fi
	//ret_ax = ax
  @if 0	//ºØ ﬂ≤
	push es.bx
		Dos.GetDTA
		dtaAdr = es.bx
		ax = &Dos.FIND[es:bx].fname
  		Pri.Fmt "%Fs  fsize = %ld\N", es.ax, Dos.FIND[es:bx].fsize
	pop  es.bx
  @fi
	if (GHT.ftimeFlg)
		ax = GHT.rdHdl
		if (GHT.ftimeFname.h)
			push ds
				ds.dx = GHT.ftimeFname
				Lfn.Open dx,0
			|pop ds
			if (_c_)
				ax = GHT.rdHdl
			fi
		fi
		push bx
			Dos.GetFtime ax
		pop  bx
		GHT.ftime = cx
		GHT.fdate = dx
	fi
	return
endproc


*proc CloseR(bx)
enter
	save bx,ax
	bx = GHT.rdHdl
	Dos.Close bx
	return
endproc




*proc Read(bx, ax.dx, cx)
begin
	save ax,bx,cx,dx,ds
 Deb.Chk
 if (==)
 	Pri.Fmt "Read %lx, %lx, %u --- %x\N", ds.bx, ax.dx, cx, GHT.rdHdl
 fi
	bx = GHT.rdHdl
	ds = ax
	Subr.Read bx,dx,cx
	return
endproc

endmodule
