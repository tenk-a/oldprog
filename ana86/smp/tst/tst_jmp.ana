module CHK
//Å†  ÉWÉÉÉìÉvä÷åW

proc GLBL()
begin
	nop 			//nop
	ret 			//retn
	ret 4			//retn Iw
	retf			//retf
	retf 6			//retf Iw
	jmp GLBL		//jmp GLBL
	jmp w[si]		//jmp MRw
	jmp d[bx]		//jmp Md
	jmp.d GLBL
	call GLBL		//call GLBL
	call.d GLBL
	call w[si]		//call MRw
	call d[bx]		//call Md
	call.d 0x04001000
	call.d ww(0x400,0x1000)
	call.d ww(0x200,&GLBL)

	///////////////
	go LBL1
	gosub LBL1
	go.b LBL1

	go (==) LBL1
	go (!=) LBL2
	go (<)	LBL1
	go (>=) LBL2
	go (>)	LBL1
	go (<=) LBL2
 LBL1:
	go (cf) LBL1
	go (cf==1) LBL1
	go !(!cf) LBL1
	go !(cf==0) LBL1
	go (!cf) LBL1
	go !(cf) LBL1
	go (cf==0) LBL1
	go !(cf==1) LBL1

	go (zf) LBL1
	go (!zf) LBL1
	go (sf) LBL1
	go (!sf) LBL1
	go (pf) LBL1
	go (!pf) LBL1
	go (ovf) LBL1
	go (!ovf) LBL1
 LBL2:
	go (!cx) LBL1
	go (cx) LBL1
	|go (cx) LBL1

	go (--cx) LBL1
	go (--cx&&zf) LBL1
	go (--cx&&zf==1) LBL1
	go (--cx&&!zf) LBL1
	go (--cx&&zf==0) LBL1

	go !(--cx) LBL1
	go !(--cx&&zf) LBL1
	go !(--cx&&zf==1) LBL1
	go !(--cx&&!zf) LBL1
	go !(--cx&&zf==0) LBL1
 LBL3:
	go (bx) LBL3
	go (!bx) LBL3
	go (bx == 0) LBL3
	go (bx - 0) LBL3
	go (bx == 1) LBL3
	go (bx - 1) LBL3
	go (bx += 1) LBL3
	go (bx -= 2) LBL3
	go (++bx) LBL3
	go (--bx) LBL3
	go (bx & 0x0F) LBL3
	go (bx &= 0b1000000) LBL3
	go (bx |= 0x10) LBL3
	go (bx ^= 0x10) LBL3
	go (bx <<= 1) LBL3
	go (bx >>= cl) LBL3
	go (bx .>>= cl) LBL3

	go ((bx - 1) == 0) LBL4
	go ((bx += 1) > 0) LBL4
	go ((bx -= 2) < 0) LBL4
	go (++bx .>. 0) LBL4
	go (--bx .<. 0) LBL4
	go ((bx & 0x0F) >= 0) LBL4
	go ((bx &= 0b1000000) <= 0) LBL4
	go ((bx |= 0x10) .>=. 0) LBL4
	go ((bx ^= 0x10) .<=. 0) LBL4
	go ((bx <<= 1) != 0) LBL4
	go (!(bx >>= cl))  LBL4
	go ((bx .>>= cl)) LBL4
 LBL4:
	/****/
	go (ax == 1) LBL4
	go !(ax != 2) LBL4
	go (ax != 2) LBL4
	go !(ax == 1) LBL4

	go (bx < cx) LBL4
	go !(bx >= cx) LBL4
	go (bx <= cx) LBL4
	go !(bx > cx) LBL4

	go (bx > cx) LBL5
	go !(bx <= cx) LBL5
	go (bx >= cx) LBL5
	go !(bx < cx) LBL5

	go (bx .<. cx) LBL4
	go !(bx .>=. cx) LBL4
	go (bx .<=. cx) LBL4
	go !(bx .>. cx) LBL4

	go (bx .>. cx) LBL5
	go !(bx .<=. cx) LBL5
	go (bx .>=. cx) LBL5
	go !(bx .<. cx) LBL5
 LBL5:
	//
	go (ax && bx) LBL5
	go (ax || bx) LBL5

	go (ax && bx || cx && dx) LBL5
	go !((ax || bx) && (cx || dx)) LBL5

	go !(ax && bx || cx && dx) LBL6
	go ((ax || bx) && (cx || dx)) LBL6

	go (ax || bx && cx || dx) LBL6
	go (ax && (bx || cx) && dx) LBL6
	go (ax || bx || cx || dx) LBL6
	go (ax || (bx || (cx || dx))) LBL6
 LBL6:
endproc

proc GLBL2()
begin
	go.w LBL1
	gosub.w LBL1

	go.w (==) LBL1
	go.w (!=) LBL2
	go.w (<)  LBL1
	go.w (>=) LBL2
	go.w (>)  LBL1
	go.w (<=) LBL2
 LBL1:
	go.w (cf) LBL1
	go.w (cf==1) LBL1
	go.w !(!cf) LBL1
	go.w !(cf==0) LBL1
	go.w (!cf) LBL1
	go.w !(cf) LBL1
	go.w (cf==0) LBL1
	go.w !(cf==1) LBL1

	go.w (zf) LBL1
	go.w (!zf) LBL1
	go.w (sf) LBL1
	go.w (!sf) LBL1
	go.w (pf) LBL1
	go.w (!pf) LBL1
	go.w (ovf) LBL1
	go.w (!ovf) LBL1
 LBL2:
	go.w (!cx) LBL1
	go.w (cx) LBL1
	|go.w (cx) LBL1

	go.w (--cx) LBL1
	go.w (--cx&&zf) LBL1
	go.w (--cx&&zf==1) LBL1
	go.w (--cx&&!zf) LBL1
	go.w (--cx&&zf==0) LBL1

	go.w !(--cx) LBL1
	go.w !(--cx&&zf) LBL1
	go.w !(--cx&&zf==1) LBL1
	go.w !(--cx&&!zf) LBL1
	go.w !(--cx&&zf==0) LBL1
 LBL3:
	go.w (bx) LBL3
	go.w (!bx) LBL3
	go.w (bx == 0) LBL3
	go.w (bx - 0) LBL3
	go.w (bx == 1) LBL3
	go.w (bx - 1) LBL3
	go.w (bx += 1) LBL3
	go.w (bx -= 2) LBL3
	go.w (++bx) LBL3
	go.w (--bx) LBL3
	go.w (bx & 0x0F) LBL3
	go.w (bx &= 0b1000000) LBL3
	go.w (bx |= 0x10) LBL3
	go.w (bx ^= 0x10) LBL3
	go.w (bx <<= 1) LBL3
	go.w (bx >>= cl) LBL3
	go.w (bx .>>= cl) LBL3

	go.w ((bx - 1) == 0) LBL4
	go.w ((bx += 1) > 0) LBL4
	go.w ((bx -= 2) < 0) LBL4
	go.w (++bx .>. 0) LBL4
	go.w (--bx .<. 0) LBL4
	go.w ((bx & 0x0F) >= 0) LBL4
	go.w ((bx &= 0b1000000) <= 0) LBL4
	go.w ((bx |= 0x10) .>=. 0) LBL4
	go.w ((bx ^= 0x10) .<=. 0) LBL4
	go.w ((bx <<= 1) != 0) LBL4
	go.w (!(bx >>= cl))  LBL4
	go.w ((bx .>>= cl)) LBL4
 LBL4:
	/****/
	go.w (ax == 1) LBL4
	go.w !(ax != 2) LBL4
	go.w (ax != 2) LBL4
	go.w !(ax == 1) LBL4

	go.w (bx < cx) LBL4
	go.w !(bx >= cx) LBL4
	go.w (bx <= cx) LBL4
	go.w !(bx > cx) LBL4

	go.w (bx > cx) LBL5
	go.w !(bx <= cx) LBL5
	go.w (bx >= cx) LBL5
	go.w !(bx < cx) LBL5

	go.w (bx .<. cx) LBL4
	go.w !(bx .>=. cx) LBL4
	go.w (bx .<=. cx) LBL4
	go.w !(bx .>. cx) LBL4

	go.w (bx .>. cx) LBL5
	go.w !(bx .<=. cx) LBL5
	go.w (bx .>=. cx) LBL5
	go.w !(bx .<. cx) LBL5
 LBL5:
	//
	go.w (ax && bx) LBL5
	go.w (ax || bx) LBL5

	go.w (ax && bx || cx && dx) LBL5
	go.w !((ax || bx) && (cx || dx)) LBL5

	go.w !(ax && bx || cx && dx) LBL6
	go.w ((ax || bx) && (cx || dx)) LBL6

	go.w (ax || bx && cx || dx) LBL6
	go.w (ax && (bx || cx) && dx) LBL6
	go.w (ax || bx || cx || dx) LBL6
	go.w (ax || (bx || (cx || dx))) LBL6
 LBL6:
endproc

endmodule
