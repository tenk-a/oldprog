たわごと


  最初にことわっておくと、これは、個人的な感想を書いたものなので、書
いといて何ですが、あまり読まないで下さい... 読まれる方は、読んでなん
じゃこいつ、って腹が立つかもしれませんが、大目にみてやってください。
でもって、文章になってません... 思い出したことを書き留めてるだけなの
な...
  つまらんことに 17Kバイト位費やしてダウンしたいただいた方には申し訳
ないですが...


＃  どーき... おもいかえせば...

  このプログラムは、”こんぱいらあ、を、作りたいっ”のと、”Ｃで、で
っかいプログラムを作りたいっ”と、いう欲求に動かされて作りました^^;

  コンパイラ作りにあこがれてン年（ﾁｮｲｵｰﾊﾞｰ）、コンパイラというには、
ちょっと違うアセンブラ・プリプロセッサだけど、なんとか成仏できました。

  いきあたりばったりで作ったので、思い返すとここまで出来たのがものす
ごく不思議... だいたいこんな感じのものが作りたい、っと、ろくすっぽ考
えず簡単な計画表とかも作らず（作れず）、作っている過程で文法を決める
という... 無計画で不経済... 
  最初に思っていたのに比べれば、はるかに巨大でややこしい代物になりま
した。

  もともとは、簡単なものでいいからコンパイラを作りたいだけで、別に自
作言語にするつもりもなく、とりあえず6309用のＣコンパイラを作ろうとし
ていたのですが... と、MSDOS 使う前は FM11という８ビット機で os9/6309
という環境だったので...とくにＣというわけでもなく Micro-C という PDS
のＣコンパイラがソース公開されており、単にそれをいじっていたのですが、 
これは古い K&R なもので、だから ANSI の機能をちょっとつけようと考え
たのですが、それが間違いで、泥沼にはまり（まあ、例によって無計画..）
でもって、知れば知るほど馬鹿でっかいＡＮＳＩ−Ｃ... プロトタイプ宣言
や構造体メンバ用に名前空間用意せなあかんし... えい、せっかくコンパイ
ラの知識がついたんだから(思い上がり)、新たに作ってやろう、と、無計画
に作りはじめるが、当然挫折... 最初から変に凝ったこと考えてしまったり,
きつい64Kバイトのメモリ制限... 実数なんて元から諦めてるけど...単に勢
いだけで知識ないことを思い知る... 名前表の管理、とくに個々の構造体メ
ンバ用の名前表をどうやればいいの...（ほんま気だけが先行...今でも代わ
りないけど）...そうこうするうちMSDOS(ﾓﾄﾞｷ)環境を手にいれ、そこでクロ
ス・コンパイラにしようと思うも, だんだん09する気も萎えて今更6309用作
っても自分でさえ使うことないだろうと思うとやる気が失せ、じゃあ、8086
用というと, それこそ充実した世界（なんてったって LSI-C 試食版がある）
8086アセンブラはぜんぜんしらんし... それでもまだ、09は使ってたからＣ
はあきらめ、Ｃとは別に作りたいな、と、思っていた BASE のようなオリジ
ナル表記のアセンブラを作ることにし、仕様を決めるためいろいろ文献みて
るうち、8086のアセンブラみてて、やっぱりもう 09 することあまりないし、
できれば 8086 で汗書けるようになりたいし、でも、この条件ブランチ命令
はなんなんだ！ぜったい覚えられん（覚えてやるもんか）、どうせなら8086
のほうを作れば少なくとも自分は使うだろうと思い（自分が使わんプログラ
ムは作る気がしない）、 8086 に鞍替えし、.obj とか .exe を どう生成す
るかわからんしめんどくさいのでアセンブラ(r86) のソースを生成すること
にしました。 8086 のアセンブリ言語はこの ana を作る過程で覚えました
（いまだ、DOS(link) でのセグメントのあつかいとかわややな面がある）...
というのを１年以上前の２、３年やってた...
  というわけで、masm系でプログラムを組んだことがないくせに、こんなも
ん作ったわけです（masmのソースはフリーウェアのソースとか逆汗とか本と
かでしか見てない...^^;）


＃  かんしゃ

  実は FPL はずっとROMさせていただいてまして^^;、 いろいろ参考にさせ
ていただいています（ほんと、すごいぃなぁ、といつも思いながら拝見させ
ていただいてます）
  とくにオケゲム師には感謝してます。オケゲム師の書かれたコンパイラを
作る上での心得を読まなかったら、ana はここまで完成せず挫折していたこ
とでしょう（かってに ROM ってるだけで面識とかないですが、 師と仰がせ
ていただきます^^;）
  その肝心のログはどっかにやってしまって正確には覚えてないのですが、
とくにその一つ、オプティマイズの実装は最後までガマンする、というよう
なのがあり痛感しました。Micro-C をいじったとときもそうでしたし、その
とき、ana はifやloop等や条件分岐などがないくせに、オプティマイズの誘
惑にまけて、32ビット合成レジスタ関係を含め合成命令が生成できるように
してしまい、ソースがごちゃごちゃで、ifやloop の実装ができそうになく、
諦めようと思っていたときでした。実際に実現されている方の言葉の威力は
すごく、おかげで合成命令関係をいった捨てる勇気ができ、再出発できまし
た（といいつつ心得はあまり守れず、今のソースはそのとき以上に混沌で、
もう、虫取るごとに新しい虫を加えそうで... これ以上の改造はまた新たに
作りなおさな無理だなあ、と）
  また、オケゲム師が紹介（宣伝）されていたおかげで Turing という言語
を知ることができました。それから師のカベソンのソースのおかげで、r86 
用の生成方法を知ることができました。ほんと、ありがとうございます。


＃  仕様

  仕様作成にはいろいろな言語をものを参考にしました。
  ６３０９、８０ｎ８６、６８ＫアセンブラやＣ,modula2,basic,Turing な
どのメジャーな言語、Ｋ、SLANG、BASE、PASM、TL/1 等の(いにしえの)雑誌
登載の言語などなど（ＫやBASEはI/O 誌に載っていた言語で、Ｋは 09用の
コンパイラ、BASE はZ80用のBASICライクなアセンブラで(09用もあった)、
フリーウェアで BASEと同じ仕様の XINA というのがあります。SLANG は 
Oh!MZ(X)誌 に発表されていたZ80コンパイラです。 PASM はインターフェー
ス誌に発表されていた MASM 用のアセンブラ・プリプロセッサです（anaは
これの二番煎じです^^;）。これはニフティのどこかのフォーラムにアップ
されていました. TL/1 はアスキー誌に載っていた１バイト整数のコンパイ
ラです）
  もっとも実際使ったことがあるのはＫ、Ｃ、Basic とアセンブラくらいで
あとは文法を眺めるしかなかったのですが（pascalとかは使ったことなく、
よくしらない...）

  当所はなるべくＣに似せようとしていましたが、Ｃの不満のある部分まで
同じにするのはやっぱりいやだなあ、と一つ例外にするとこれもこれもと崩
れていきました。
  しかし、Ｃと同じにする、という基本方針がなくなると今度はいちいち自
分で選び考えるはめになり、難航しました。もちろん、これがすごくおもし
ろいのですが（^o^;)...考えるだけならいいけど、決めてみた後、えい、誰
が実装すんねん、と... ただでさえ無計画が、ほんと混沌としてしまいまし
た... あやうく仕様作りを楽しんでそれで終りとなるところ^^;

  演算子や考え方等の大部分はＣを参考,ニーモニックは8086,6809アセンブ
ラ、変数宣言なんかはmasmかな、word,dword型が構造体ってのは r86がヒン
トになってる、module とか import とかのモジュールなのはmodula2, fiな
のはＫに対するこだわりか, 符号付き比較演算子（.>.など）はSLANGからい
ただき、'\['とか next とか <=> はPASMからいただき, ';'の扱いをＣから
代える気になったり, 配列が () でいいやと諦めたのは Turing の影響でせ
う... とにかくいろいろゴチャゴチャと影響され見栄をはってみました。

  それにしても自分では、よくもまあここまでできたなあ、と感心してます。
  当所は、Ｃっぽい式の記述とif 等で簡単な条件式が使えればいいや、で
... やっぱり高級言語のような手続き呼びだしがしたい、条件式は &&や||
もほしい、見栄はってモジュール化よ、せめて#define のようなのでいいか
らマクロがほしい、、、まあ、１つできれば次から次へと欲のでること...
おかげで、ソースも言語仕様も大きくなってしまいました.


＃  名前の由来？

  ａｎａという名前は、もともと８０８６でなく６３０９のネィティブ・
モード用に作りはじめたので  A hd6309 Native mode Assembler  とか、
言語仕様が変態的(?) だったので AbNormal Assembler くらいのつもりで
つけました（英語はからっきし駄目なので間違ってるでせう）。

  また経験の浅いアマグラマがつくる言語なので'穴'だらけやろうという
のも理由の一つです（実際穴だらけ継ぎ接ぎだらけになりました^^;）。
８０８６用となりａｎａ８６を漢字で書くと、『穴八六』と末広りの八が
三つもあって縁起がよさそうにも思えます（まぬけな感じもしますが ^_^）。
あと、どうでもいいことですが、とりあえず 'ANA is Not Assembler.'と
いうのは否定しとこうと思います。きらいじゃないけど ＸＩＮＡ をダウ
ンするまでこのことに気ずかなかったのがくやしいからです^^.



＃  できなかったこと、やりたかったこと

  作るつもりで実現出来なかった機能や使ってみて欲しくなった機能をかき
だしてみます... 作る予定はないです。作り直したい気もあるけど。自分の
腕を無視して仕様を考えて楽しんでるだけで、実際どうつくればいいかわか
らんものもあるし、実現できそうにないものもあるし。できそうなものもあ
るけど、ana 自体を作り直さないといけないし^^;
（全体に型関係、モジュール関係の扱いがもっとよくなったらなあ..と...
  しかし、書いてみると、こんなに出てくるとは思わんかった... それも
  どう実装すればいいのかわからんのばっかし^^;）


・jmp （手続き外へのジャンプ）でも条件分岐できるようにしたい。
  現在は 手続き外へ条件ジャンプするときはたとえ、ショートになると
  わかっていても、その記述方法がないので(^^;

・xlat を al = b[bx + al] にしたために、[..] 内のチェックが甘くなった
  面があるから、xlat は xlat のままのほうがよかったかな...

・if.b loop.w go.d とかの b,w,d は、s,n|l,f のほうがよかったかも

・どうせ++,--をやめて inc,dec にしとけばよかったかな... 今のばあい、
  後付けは無いし、b[++si] とか w[di++] みたいなことはできないんだし.

・ case (switch) 文がない。

・手続き呼びだしで、パスカル式の引数もできればよかった

・関数もあったらいいかも... ただし、復帰値も暗黙の代入になるので、
  見つけにくいバグが殖えまくるだろうな...（引数だけでも、めんどいのに）

・実は手続きの入出力でのレジスタ・フラグのチェックを扱うようにしていたが、
  チェックが甘く、挫折した(その名残で in,out,break という指定が残ってる
  かも^^;）
  かなり本格的に行ごとのレジスタ・フラグの状態をチェックするのでないかぎり、
  まちがったコメントより、さらに質の悪い状態になってしまう。

・{} の扱いをもちょっと、ちゃんとしたい...使わなくするとか。
  現在は配列の初期化にしか使ってないのでもったいない。

・文字列へのポインタとかの初期化も行なえたらいいな。
  初期化関係がもちょい、楽できるほうがいいと。
  
・ワード型配列での文字列の初期化をなんとかしたい。
  じつは、word 型での文字列の初期化は実装済み(^_^)なのだけど、EUC
  とかunicode(だっけ) とかがちらついて仕様にいれてない...
  単に、半角は上位バイトに 0いれてシフトJIS はそのまま 2バイトを
  置く、というふうになってるはず.

・ビット・フィールド関係(構造体)がほしかった

・配列の宣言を
	型(n1,n2,...)
  でなく
  	array(n1,n2,...) of 型
  にすべきだった。ただし、基本型は例外として現在の方法もみとめる、と。

・構造体を型指定のところで直接宣言できるようにしたい...どちらかといえば
  pascal とかの record みたいになるかな...

  あっと、構造体は当所、
  	struct StTyp Memb1:Typ1,Memb2:Typ2,...
  って感じで定義するようになってました... 改行の扱いが特殊だったころわ
  （','の直後の改行は空白扱いだった...今も残ってるけど^^;）

・構造体の定数を記述できるようにしたい。
  型名(値,値,...) って感じ。4バイト以上の生成は文字列と同じように、かな
  ... & を付けさせるほうがいいとか）
  構造体の定義にしたがった初期化が行なえるようにしたい、し。
  
・構造体にマクロ的な機能をつけて
	struct StTyp(N)
	   hdl:w
	   buf:b(N)
	endstruct
  のようなことができるようにしたい...
  （配列を変更したいというのはこのためですが...）
  N とかは、初期値（文字列など）のサイズからでも取れるようにして...

・配列以外に文字列型（長さのための変数を用意する）とかあったらいいかな
  でもこれは、上の構造体の仕様の延長でいけるかな...
  	struct string(*)
  	  len:w = *  // この部分は初期値で指定しなくてすむ、と...
  	  buf:b(*)
  	endstruct
  って感じで...

・型は type で別名定義できますが、基本型はサイズを基準に判別している
  ので、型名の違いで判定することができません。

・アドレス型、というか、参照型、というか、pascalのvar引数とかc++の
  参照型?のようなものがほしかった...現在のana では、
  	var ary:b(30)
  とか宣言された配列のアドレスを手続きに渡すときは、
  	proc Pr(si)
  と宣言された手続きに渡すとすると
  	Pr &ary
  のようにしなけらばなりませんが、これを、
  	proc Pr(si:address)
  とでもして、
  	Pr ary
  で呼び出せるようにしたかったです。

・列挙型がほしい。
  const で列挙型っぽいことできますが、輸出先のモジュールでもちいると
  	Dos.Write Dos.STDOUT,dx,cx
  のように、Dos が二つ現れちょっと醜いです。これを、
  	enum Std
  	   STDIN,STDOUT
  	   STDERR
  	endenum
  として、
  	*proc Write (bx:Std,dx,cx)
  のように宣言して、輸出先では
  	Dos.Write STDOUT,dx,cx
  のようにつかえるようにできれば、と。このばあいの bx には、STDIN,
  STDOUT,STDERR とStd型の変数と ワード型のレジスタ以外はエラーにする
  ようにする、と。レジスタはサイズが同じならどんな型にでもなるという
  ことにしておく、と。

・module を構造体と同じようなメンバ名を持てるようにし、また構造体の
  ように型として用いたかった。でもってそれで宣言された変数のメンバの
  形で手続きとかも呼べるように、と... まあ、Ｃ++ のクラスのごく初歩的
  な部分がほしかった... 継承とかは、取り敢えず考えないことにして^^;
  ようなこと。

・マクロ手続きでif とかloop とか手続きよびだしとかできるよう、普通の
  手続きと同じ命令が使えるようにしたい。
  でもって、引数で、@defineマクロに近いトークンの置き換え関係の指定
  ができるようにしたい。定数でないとだめ、とか、２バイトレジスタで
  ないとだめとか、インデックス（ポインタ）レジスタでないとだめんとか
  左辺値でないとだめとか、指定できるといいな、と。

  マクロ手続きがこんなに制限があるのは当所マクロのことを考えておらず、
  手続き呼びだしのとき、ちょっと、その直前で某かの処理を生成するもく
  的で付けてみたもんで、
    proc Pr(p1:w)
    before
    	bx = %var
    enter
    	:
    	:
    endproc
  って、かんじの指定し
  	(push (p1))
  	bx = %var
  	call Pr
  を生成するのだけど... う〜む、いま見ると何のために付けたかわからんな..
  あと、after とかで、復帰後に生成できるようにするとか... 引数すてるため
  に push cx とかね... before は実装したけど、after は挫折して... で、
  before は call を生成しないようにして、macro に代わったと（実はbefore
  は残ってるかも..）

  しかし、MASMのマクロってすごいな...


・一つのモジュールをファイル分割するとき、依存関係を記述できるように
  したい。今の場合、Ｃのヘッダと同じようにしないといけないので、どの
  ファイルがヘッダ（中心）でどのファイルが実体なのかはユーザが管理し
  ないといけない。

・一つのモジュール（ファイル）をわけて出力できるようにして、ライブラ
  リを簡単に作れるようにしたい。

・完全に宣言のみのモジュールならそのころを示すようにすべきだった。
  
・一つのファイルに複数のモジュールを入れれるようにしたい。
 （実は importでなら複数のモジュールに対応してる可能性があるかもしれ
   ません）

・モジュール内でも、範囲分けできるようにしたい。
  関数や変数名のスコープを限定したい、と。
  モジュール内モジュールが、いいかな。

・外部に見える手続き内の変数のようなものを考えていたができなかった.
  	proc Pr(ax,bx)
  	  var v1:w,b1:b
  	enter
  	  var v2:w
  	  :
  	endproc
  のようにして、他では Pr.v1 で参照できるようなものを...でも、できな
  くてよかったよな... モジュール内モジュールのほうがいいかな.

・常駐型プログラムをつくることを考慮していなかった。
  プログラム・ルーチンの移動とか、言語仕様をだますような感じになる。
  移動を考慮したモジュール内モジュールとかが宣言できるといいなあ。
  定量の移動なら、わざわざプログラマがジャンプ・アドレス等の移動量の
  計算を書かなくてもいいようにするとか..でも、ここまですることないか

・var を_DATA 固定でなく、cvar と同じようにメモリ・モデル (COMPACT,
  LARGE）によってはモジュール専用のセグメントを定義するようにする。
  で、代わりに_DATAに固定した宣言子として dvar を用意する.

・ＢＳＳ領域の消去方法がようわからん... というかアセンブラのセグメン
  トの扱いがわかってない...


＃  さんこう

  コンパイラの知識は前に書いた通りPDSの
	Micro-C (6809用Ｃコンパイラ)    Masataka Ohta,Hiroshi Tezuka
から多くを得ました。いや、Ｃ言語自体、このソースを読みながら覚えてい
ったといえるかも^^; また、同じ作者達のＰＤＳの6809用アセンブラのソー
スも参考になりました（実際のソースは fos9 の方々が改造された物のほう
を見ました）. Micro-Cは、今はなき月刊 RAM 誌にソース付で掲載されてお
り（連載当時 RAM を読んでいたわけでわない...偶然もらったものに載って
いたんです）、その解説がおおいに役立ちました。

  コンパイラ関係の本は大学の図書館にあったものをいくつか見てみて、
    岩波講座ｿﾌﾄｳｪｱ科学5 プログラミング言語処理系 （佐々政孝）
が一番よかったです（結局これは購入）。
構造体をどうするのか悩んでたので、この本を見たときは感激でした。
（見ると、知らないことがいっぱいあるある.. まだわかんないことが多い^^;）
（実際の作成でどの程度役立てることができたか自身ありませんが）
（Micro-CはK&Rなので構造体はあったけど、メンバは他の変数と同じ名前表
  に登録してたので）
  いろいろ本はあり、簡単なコンパイラの例が載っててよさそうなのもある
けど, 構造体とかは、端折られてる... （あっと、物色してたときには図書
館にはコンパイラI,IIは入ってなかった）。
  他にもいろいろ参考にしてますが、とりあえず...


＃  成仏

  とにかく、現在の代物まで、こぎつけたはいいけど、世の中には MASM v6
のようなものがあり、そうでなくても、MASMは、構造化のためのマクロがい
くつも出回っており、わざわざ、こんな不安定で独り善がりな仕様のアセン
ブラ・プリプロセッサを使ってくれるような奇特な方はそういないだろう、
と思い、だいたい自分でもそんなに使ってないし、とアップするのはあきら
めてましたが、やっぱり、せっかく、ここまでやったんだし、これに費やし
た時間はかなりのもんだし、それどころか、これで人生をつまずいたともい
えなくないし、とにかく、自分とこだけで腐らせるなら作らないほうがずっ
とよいとなり非常に悔しいので、成仏させるために、  未完成な代物だけど
ＦＰＬにアップすることにしました（迷惑なやつ^^;）
  １度草の根のネットにアップしたことはありますが、あまりにバグが多す
ぎたのと仕様がころころ代わったので、そのときはすぐ消してしまった... 
まんがいち、それを持っている方がおられたら、それは削除して忘れてくだ
さいね。
  と、いうことで、ダウンされたかたは、できれば削除せず、使わなくてい
いからディスクの肥しにしてやってください。もちろん、使ってくださると
非常にうれしいですが。


＃  ふうぅ

  よまれた方、ごくろうさまです...
