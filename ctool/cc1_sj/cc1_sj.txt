cc1_sj ver.1.11
  ---- mingw(gcc v3)用 SJIS対策の cpp ラッパー ----


■　はじめに

　このプログラムは、gcc(mingw) v3 でコンパイルするソース
にシフトJIS(マルチバイト文字)文字を用いたい場合に、不具合
となる \ コードを含む全角文字の対策をするもので、cc1.exe
にうわっかぶせ(ラップ)して用います。

なお、私が作業した mingw の gccバージョンは
　　gcc version 3.3.1
で、バージョンが違うと色々（ディレクトリ構造など）の
状況が違うので、このプログラムが不要であったり不可の
であったり、手直しが必要になるかもしれません。


※ gcc v3(以降)用。v2には cpp_sj として別配布。



■mingw へのインストール方法

とりあえず、mingw のインストールしてあるディレクトリを

　　c:\mingw

　mingw のバージョンを

　　3.1.1

とします。
　このとき

　　c:\mingw\lib\gcc-lib\mingw32\3.3.1

というディレクトリがあります。
（少しバージョンが違うと 3.3.1 の部分が違うでしょう）。
このディレクトリの中に

　　cc1.exe
　　cc1plus.exe
　　cc1obj.exe

という実行ファイルがあります。
　これらのファイルをまず、

　　cc1_org.exe
　　cc1plus_org.exe
　　cc1obj_org.exe

に名前を変更し、次に、cc1_sj.exe を３つコピーして

　　cc1.exe
　　cc1plus.exe
　　cc1obj.exe

の名でこのディレクトリに入れます。
とりあえず、これでおわり。


※バージョン違いや別のgcc環境へのインストールのヒント

　ようは、gcc(コンパイラドライバー)が実際に呼び出すcc1
どこにあるかを探す、ということで、適当なCソース
(hello worldとか)を用意して、

> gcc -v tst.c

とすれば、ずらずらあ、と、表示されるメッセージのなかの
cc1.exe を探し（処理順からいって真っ先に呼べれるので
すぐに表示されていると思う）、そのパスを元に作業する、
てことになります。



■使い方

　インストールがすんだ状態で、

> gcc -D_CPP_SJ tst.c

のように -D_CPP_SJ を指定することで、シフトJISの
\ 対策したコンパイルが行えます。
指定のない限りは、元の動作のまま(変換無し)です。

※ cpp_sj.exe の gcc v3対応版になので CC1_SJ ではないです^^;

　また、

　-D_CPP_SJ=0     未指定と一緒
　-D_CPP_SJ=1     -D_CPP_SJ のみと一緒

のようにも指定できます。 マクロ名 _CPP_SJ をソース中に
使う場合があるかな、と用意しましたが、基本的には、
-D_CPP_SJ の指定の有無のみでの運用を想定しています。

※ cpp_sj にあった -D_CPP_SJ=2 はありません。



■ \を含むシフトJIS全角文字の問題

シフトJIS 全角文字に未対応のコンパイラで \を含む全角を
用いると

1.コンパイルエラーになる
  ex) printf("表");
  ※ 右の" が表の下位 0x5C のため \" として、文字列が
     継続していることになる

2.実行時に文字化けが発生する
  ex)  printf("表示\n");
  ※ 右の" が表の下位 0x5C が消え1バイトづつづれて
     強引に文字列が形成される

3.ソースが一行コンパイルされない
  ex)  //表
       a = a + 1;
  ※ 行末 \+改行は、行連結機能となるので、a=a+1; が
     コメント扱いになり、実行されない.

のような問題が起きます。

 1. はコンパイル時にエラーが出て気づけますが、
 2. は不正な文字コードに化ければ警告がでますが、そう
    でなければ実行時まで見つかりませんし、
 3. は、警告レベルを上げておけば
    worning: multiline `//' comment
  と出ますが、一見正しいソースですし行連結のことを知
  らなかったり失念している人だとつい見過ごされやすい
  バグになります。

（シフトJIS/MS全角対応を謳ったコンパイラでもこなれて
　なさそうな場合は、この手のことを疑ってかかったほう
　がよい場合もあるかも）



■ \対策方法

　C/C++ソース中で 0x??5C のような下位バイトが \ になる
全角文字の直後に \ を挿入することで対処しています。

　ただし例外として
　  //表
　や
　　/*
　　 *ソ
　　 */
　のようにコメント中の問題の文字(表,ソ)の直後で改行が
あった場合は、'\'の代わりに'_' を挿入しています。

※コメント中は'\'エスケープ処理の対象外のようで、いくつ
'\'があろうと最後に'\'があると行連結してしまうのでした。
(行末の空白は削除されるようで、'_'なく' 'だと行連結され
てしまいました)



■ 実際の動作/ファイル変換の手順

　指定されたソースファイルをシフトJIS文字対策('\'挿入)
して、テンポラリファイルに作成、このとき、ファイル先頭に
# 1 "src_file.c"
のような、ソースファイル名を記述した１行を挿入しておき、
このテンポラリファイル名を cc1.exe に渡して実行しています。

※ cpp にうわっかぶせるよりも単純な仕組みになってしまった^^;
　ひょっとして cpp でもこの方法つかえたのかな(未確認)



■使用上の注意/制限

・指定された１ファイルしか全角対応変換しないので、その
　ファイルから #include されたファイル中の全角に対して
　は処理できません。

　※ # 行番号 "ファイル名"
　　が使えるので予めシフトJIS対応の cpp を行えばできそ
　　...だけど、そこまでする気はなし。

・gccから cc1 に渡される引数から対象ファイル名を選ぶとき
　cc1のすべてのオプションを知っているわけでないため、
　ご認識する可能性があるかもしれません

・ソース中の全角文字対策だけなので、ファイル名中の全角
　やライブラリの問題は解決されません:-)

・cpp_sj.exe 自体に渡されるファイル名はシフトJIS文字に
　対応しています（返って不味い場合はソースリコンパイル
　してください）。

・cc1 に渡す引数から、cソースファイル名を取得しないと
　いけないのですが、-で始まらないけれど-オプションの引数
　という文字列がありえ、今のところ対処療法的に、実行して
　見かけたオプション名やマニュアルかららしいオプション名
　をチェックしてはじいています。
　　しかし場合によっては対処しきれず、ファイル名が多すぎ
　るとエラーメッセージを出すかもしれません。この場合、
　コンパイル対象の名前さえ間違っていなければ、動作に支障
　はありません。



■ 他ツールでの gcc v3 の日本語対応化

　すでに、gcc 自体のマルチバイト文字(シフトJIS)対応をされて
いる方がおられ、

    MinGW(gcc)の日本語対応化
        http://jp1.freemy.homeip.net/noire/sjis.html

　　MinGW日本語対応 (Biggile Web Site)
　　　　http://www.biggie.jp/jmingw.html

にソースや実行ファイルがあります。


　あと、cpp_sj/cc1_sj とは別のアプローチのシフトJIS対応の
ラッパーが
    Win32 フリー開発環境
    http://b197199.usr.starcat.ne.jp/~vorga/freedev.html

にあります(sjpp101.lzh)。

　これは gcc 以外のシフトJIS未対応コンパイラにも対応してい
ます。

　仕組みとしてはコンパイル対象のソース自体を一旦別ファイル
名にし(移動し)、シフトJIS対応('\'挿入)したテキストをソース
ファイル名で作成してそれをコンパイル、コンパイル終了後、
'\'挿入したファイルを消して退避したソースファイルを元の名
に戻す、というような処理をしているようです。


　あと gccを用いた開発環境の WideStudio(
	http://www.widestudio.org/index.html
) の v3 以前のもの(gcc v2.95.xを使用したもの) では cpp を
改造されて sjis用のオプションを用意されてました。
gcc v3以降では sjisfix というのをビルド時に実行して対処
しているようです。



■ 配布条件等

　とりあえずフリーソフトです。
まあ、配布や使用目的はご自由に。当然、無保証。

　ソースの引用/流用とかについては、改造や改良部分とかの
著作権やら特許やらの権利で他者の利用や(同様の)改変の自由
を制限するような真似をせんかぎりは、仕事や著作物に使うの
でもokです。もちろん自己責任で。



■ 履歴

2004-12-14 v1.00
　cpp_sj を元に作成。
2004-12-17 v1.10
　実は #include "..." タイプに対応してなかった(T T)
　テンポラリを tempnam()で作らずソースと同じフォルダに
　適当な名で作成するように変更(同時に同じソースをコンパイル
　しないこと)
2004-12-18 v1.11
　ファイル名チェックで弾くオプション名として、
　"-auxbase-strip"を追加。



■ おわりに

　すでに、マルチバイト文字対応の gcc があるので、 出番は
そうないでしょうが、ま、ターゲットCPU の都合や最新のコン
パイラと連動させたい、とか、なんか不都合があったときとか
の交代手段とかとして、あってもええかなあ、で、さらしてお
きます。


tenk*
NBB00541@nifty.com
http://homepage2.nifty.com/tenk/
