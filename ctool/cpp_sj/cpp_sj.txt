cpp_sj ver.1.12
  ---- mingw(gcc v2)用 SJIS対策の cpp ラッパー ----


■　はじめに

　このプログラムは、 v3以前の gcc(mingw)  でコンパイル
するソースにシフトJIS(MS全角)文字を用いたい場合に、
不具合となる \コードを含む全角文字の対策をするもので、
Cプリプロセッサ(cpp)にうわっかぶせ(ラップ)して用います。

なお、私が作業した mingwのgccバージョンは
　　gcc version 2.95.3-5
で、バージョンが違うと色々（ディレクトリ構造など）の
状況が違うので、このプログラムが不要であったり不可の
であったり、手直しが必要になるかもしれません。

※ gcc v3以降は未対応。別途配布のcc1_sjで対応しています。
　後述参照。


■mingw へのインストール方法

とりあえず、mingw のインストールしてあるディレクトリを

　　c:\mingw

　mingw のバージョンを

　　2.95.3-5

とします。
　このとき

　　c:\mingw\lib\gcc-lib\mingw32\2.95.3-5

というディレクトリがあります。
（少しバージョンが違うと 2.95.3-5 の部分が違うでしょう）。
このディレクトリの中に

　　cpp0.exe

という実行ファイルがあります。
　このファイルをまず、

　　cpp0_org.exe

に名前を変更し、次に、cpp_sj.exe を

　　cpp0.exe

の名でこのディレクトリにコピーします。
とりあえず、これでおわり。


※バージョン違いや別のgcc環境へのインストールのヒント

　ようは、gcc(コンパイラドライバー)が実際に呼び出すcpp
(cプリプロセッサ) はどこにあるかを探す、ということで、
適当なCソース(hello worldとか)を用意して、

> gcc -v tst.c

とすれば、ずらずらあ、と、表示されるメッセージのなかの
Cプリプロセッサらしき名前“cppなんちゃら”や“なんちゃ
らcpp”やらを探し（処理順からいって真っ先に呼べれるので
すぐに表示されていると思う）、そのパスを元に作業する、
てことになります。

　あと元cpp の名前の変更は、cpp0_org.exe 固定でなく
元cpp名に _org を足した名前で、cpp.exe ならば cpp_org.exe
に変名してください。



■使い方

　インストールがすんだ状態で、

> gcc -D_CPP_SJ tst.c

のように -D_CPP_SJ を指定することで、　シフトJIS文字の
\ 対策したコンパイルが行えます。
指定のない限りは、元の動作のまま(変換無し)です。

　また、

　-D_CPP_SJ=0     未指定と一緒
　-D_CPP_SJ=1     -D_CPP_SJ のみと一緒

のようにも指定できます。 マクロ名 _CPP_SJ をソース中に
使う場合があるかな、と用意しましたが、基本的には、
-D_CPP_SJ の指定の有無のみでの運用を想定しています。

※　-D_CPP_SJ=2 を指定すると、cppを実行してからSJIS対応
　を行うようになります。



■ \を含むシフトJIS全角文字の問題

シフトJIS 全角文字に未対応のコンパイラで \を含む全角を
用いると

1.コンパイルエラーになる
  ex) printf("表");
  ※ 右の" が表の下位 0x5C のため \" として、文字列が
     継続していることになる

2.実行時に文字化けが発生する
  ex)  printf("表示\n");
  ※ 右の" が表の下位 0x5C が消え1バイトづつづれて
     強引に文字列が形成される

3.ソースが一行コンパイルされない
  ex)  //表
       a = a + 1;
  ※ 行末 \+改行は、行連結機能となるので、a=a+1; が
     コメント扱いになり、実行されない.

のような問題が起きます。

 1. はコンパイル時にエラーが出て気づけますが、
 2. は不正な文字コードに化ければ警告がでますが、そう
    でなければ実行時まで見つかりませんし、
 3. は、警告レベルを上げておけば
    worning: multiline `//' comment
  と出ますが、一見正しいソースですし行連結のことを知
  らなかったり失念している人だとつい見過ごされやすい
  バグになります。

（シフトJIS/MS全角対応を謳ったコンパイラでもこなれて
　なさそうな場合は、この手のことを疑ってかかったほう
　がよい場合もあるかも）



■ \対策方法

　C/C++ソース中で 0x??5C のような下位バイトが \ になる
全角文字の直後に \ を挿入することで対処しています。

　ただし例外として
　  //表
　や
　　/*
　　 *ソ
　　 */
　のようにコメント中の問題の文字(表,ソ)の直後で改行が
あった場合は、'\'の代わりに'_' を挿入しています。

※コメント中は'\'エスケープ処理の対象外のようで、いくつ
'\'があろうと最後に'\'があると行連結してしまうのでした。
(行末の空白は削除されるようで、'_'なく' 'だと行連結され
てしまいました)



■使用上の注意/制限

・指定された１ファイルしか全角対応変換しないので、その
　ファイルから #include されたファイル中の全角に対して
　は処理できません。
　-D_CPP_SJ=2を使えば、cpp処理後のテキストをSJIS対応で
　きますが、行末に'\'入り文字があったときに、行連結が
　おきてしまいます。

・ソース中の全角文字対策だけなので、ファイル名中の全角
　やライブラリの問題は解決されません:-)

・cpp_sj.exe 自体に渡されるファイル名はシフトJIS文字に
　対応しています（返って不味い場合はソースリコンパイル
　してください）。

・ コンパイラから呼ばれることを前提に cpp の単体使用で
　のラッパーとしては考慮していません。
　必ず引数の最後の２つが入力ファイルと出力ファイルである
　と決め打ちして処理しており、標準出力も対象外です。
　※　cpp_sj に渡られる引数が 3個以上かつ -D_CPP_SJ が
　　　指定されたときのみ処理を行うとしてるため、例えば
　　　> cpp_sj -D_CPP_SJ test.c
　　　としても、シフトJIS対策されずにそのまま元cppが実行
　　　されます。



■ 実際の動作/ファイル変換の手順

　たとえば

　> cpp0.exe -D_CPP_SJ src\src.c c:\tmp\tmp.i

　として使われたとします。このとき

　1. src\src.c を読み込んでシフトJIS文字対策('\'挿入)したものを
　　　src\src.c.~ctmp
　　として生成。
　　(ファイル名は"最終出力ファイル名.~ctmp")

　2. 元のcpp0.exe を

　> cpp0_org.exe -D_CPP_SJ src\src.c.~ctmp c:\tmp\tmp.i.~itmp

　のように実行して、cpp処理済みのファイル
　　　c:\tmp\tmp.i.~itmp
　を生成。
　　(ファイル名は"最終出力ファイル名.~itmp")

　3.このままでは、コンパイルエラーで表示されるファイル名が
　　テンポラリのままなので、c:\tmp\tmp.i.~itmp を読み込んで
　　#で始まる行を探し、
　　　"src\\src.c.~ctmp"
　　という文字列があれば
　　　"src\\src.c"
　　という文字列に置換します。
　　（"文字列" なためディレクトリ区切りの\は\\になる)
　　この結果を
　　　c:\tmp\tmp.i
　　として出力します。

で、3.が終われば終了となります。

-D_CPP_SJ がなければ単に、
　　> cpp0org.exe src\src.c c:\tmp\tmp.i
を実行するだけです。


※ 3.の処理で漢字ファイル名は(というより0x80以上(?)の
　文字は) \202 のように8進表記に変換されています。



■ gcc v3.?.? 以降について

　gcc v3 以降はどうも外部の cpp を呼ばないようなんで
このラッパーでは対応できません。ので、cc1_sj というラッパー
を別途用意しています(単に対象プログラムが cc1 になったから
cc1_sj と変えただけ)。


　もっとも、すでに gcc 自体のMS全角(シフトJIS)対応をされて
いる方がおられるようなんで、そのバージョンを入手されたほうが
本質的に解決でしょう。

    MinGW(gcc)の日本語対応化
        http://jp1.freemy.homeip.net/noire/sjis.html

　　MinGW日本語対応 (Biggile Web Site)
　　　　http://www.biggie.jp/jmingw.html



　また、cpp_sj とは別のアプローチのシフトJIS対応のラッパー
が
    Win32 フリー開発環境
    http://b197199.usr.starcat.ne.jp/~vorga/freedev.html

にあります(sjpp101.lzh)。

　これは gcc 以外のシフトJIS未対応コンパイラにも対応してい
ます。

　仕組みとしてはコンパイル対象のソース自体を一旦別ファイル
名にし(移動し)、シフトJIS対応('\'挿入)したテキストをソース
ファイル名で作成してそれをコンパイル、コンパイル終了後、
'\'挿入したファイルを消して退避したソースファイルを元の名
に戻す、というような処理をしているようです。
（一旦ソースを別名/移動する、というのが気になるので cpp_sj
  では避けた方法でしたが、使い物にならないくらいなら、この
  方法のほうが正しいよなあ、と^^;）



　あと gccを用いた開発環境の WideStudio(
    http://www.widestudio.org/index.html
) の v3 以前のもの(gcc v2.95.xを使用したもの) では cpp を
改造されて sjis用のオプションを用意されてました。
gcc v3以降では sjisfix というのをビルド時に実行して対処
しているようです。



■ 配布条件等

　とりあえずフリーソフトです。
まあ、配布や使用目的はご自由に。当然、無保証。

　ソースの引用/流用とかについては、改造や改良部分とかの
著作権やら特許やらの権利で他者の利用や(同様の)改変の自由
を制限するような真似をせんかぎりは、仕事や著作物に使うの
でもokです。もちろん自己責任で。



■ 履歴
2001-??-??
　czenyen を改造して作成。
2001-12-01 v1.01
　公開
2001-12-03 v1.10
・元cppの変名を cpp0org.exe 固定をやめ、cpp名_org.exe に。
・#include "nanigasi.h" のように "の場合に不具合があっ
　ので 元cppへの中間ファイルを、cソースと同じディレクト
　リにし、また、中間ファイル名のつけ方を変更。
2003-12-?? v1.11
　gcc v3系で使えないので修正しようとしたが、そもそも
　v3は外部cppを使ってなさげで意味がなかった... とりあえず
ドキュメントの更新を目的に.
2004-12-13 v1.12
　コンパイルを vc で行うことにし、シフトJIS以外のマルチ
　バイト文字に対応できる可能性を増やす。コメント中で\入り
　文字が行末にあるとき追加する文字を全角空白から'_'に変更。
　(1/15追記:実は mingw にも mbstring.h があるようなんで
　 vcにする必要 なかったかも)


■ おわりに

　gcc v3以降に対応できないので、ほぼ終わったツールですが
ま、ターゲットCPUの都合で旧コンパイラしかない場合等、
なにかのおりの参考もあるかもしれぬ、ってことで、さらしと
きます。


tenk*
NBB00541@nifty.com
http://homepage2.nifty.com/tenk/
