ＤｏＰＩ の ソース



  DoPI のソースです。
  ＴＣ(++) と自作のアセンブラ・プリプロセッサで記述されています。

  かなり、読みにくいです。
  PiフォーマットについてはPi作者のやなぎさわ師が配布されているドキュメント
やぼく以外の方のソースを参考にしてください。このソースはあまりに汚いので
参考にならないでせう。
  名前の付け方いいかげんやわ（英語になってないわ、ローマ字まざってるわ）、
コメント少ないわ不適やわ、大域変数多いわ、モジュール分け失敗してるわ、で、
醜い代物で人に見せたくないと思うけど、どんなに醜くても公開されないよりは絶
対にいい、と思っているので公開しときます。



□  FILES

  この圧縮ファイルに入っているファイルは以下のとおりです。
	dopi_src.doc	このファイル
	dopi.c		dopi のメイン
	gvsub.c		スクロール関係と画面読み込みルーチン
	sub.c		いろいろ
	dopi.h		ヘッダ
	pi.ana		パイのヘッダ読み込み等
	pild4a.ana	16色展開ルーチン
	pild8.ana	256色展開ルーチン。
	readdata.ana	ファイルからデータ入力
	decol.ana	256->16色誤差拡散
	gvdsp.ana       画面関係
	gdcscl.ana	GDCスクロール
	direntry.ana	ディレクトリ・エントリの取得
	wildcmp.ana	direntry.anaで呼ばれるワイルド・カード機能付比較
	subr.ana	いろいろ
	pri.ana		表示
	ltoa.ana	ltoa
	ltoh.ana	ltoh
	str.ana		文字列
	bios_key.han	key入力関係のBIOSのマクロ
	dos.han		Dos Functionのマクロ
	Std.han		is???マクロ
	dbg.han		デバッグ用ヘッダ
	err.han		エラー用ヘッダ
	makefile	メイクファイル

　　　＊あとTEKITO氏作の HF/SF 用初期化＆モード変更ルーチン fb.c をそのまま
　　　　使わせていただいてます（感謝）. でもってかってに同梱させていただき
　　　　ました（ﾄﾞｷｭﾒﾝﾄ見たところ大丈夫そうなので）
	fbreadme.doc	readme.doc を変名
	fb.c		
	fbport.h
	usertype.h



□

  ＴＣは TC++ v1.01 を使用していますが、BC++でも大丈夫だとおもいます。
が、ほんとはどうかわかりません。'// コメント'を使ってるので、TC v2.0 でコン
パイルするばあいはそのコメントを削除するか/* */に変更しないと駄目です。

  アセンブラ部分は自作のアセンブラ・プリプロセッサを用いて記述しています。
  このアセンブラ・プリプロセッサは ana といいますが、中途半端なmodule化を
してしまい名前の生成がややこしいものになってしまい、Ｃとのインターフェース
が若干素直じゃありません^^;
  これはニフティのプログラム言語フォーラム（FPL）のDL1にアップしてあります。
  再コンパイルを行ないたい方はこの ana も手にいれてやってください^^;。

  ana はアセンブラのソースを生成するだけなので他にmasm系アセンブラ かLSI-C86
付属のアセンブラ r86 が必要です. MASM系アセンブラは、MASM v3.0 以降とコンパ
チであればまず、アセンブルできるとおもいます.

  実は DoPI はこの ana のサンプルというか試しに作ってみたのが始まりで、まず
Ｃで作り、最終的にはすべて ana に書き換えようと思っていたのですが、挫折した
のでした^^;



□

  作成が楽なのとスピードを早くするつもりで（あくまでつもり^^;）データ展開部
と表示部を分離しています。
  読み込んだデータを一度にメイン・メモリに展開しており、確保したメモリ以上
は展開できません。

  １６色画像のばあい入力したデータはまず、以下のように展開していきます。
１ドット 4ビット(16色) で、これを Pn(n は仮の番号) とすると
    +0        +1        +2   (バイト目)
    7654-3210 7654-3210 7654-3210
     P0   P1   P2   P3   P4   P5
のように、画面の左から右へ、上から下へのドットが並んでいます。
なお、Pn の 4ビットの対応するプレーンは
    3 2 1 0 (ビット)
    I G R B
です。

  展開に必要なバッファは
  	横ドット数×(縦ドット数+2) ／ ２ バイト
必要です。
  縦ドット数+2 の +2 は、Piの仕様が画像の始点より前に２ライン存在するように
なっているからです。

  すべて、展開しおわると、今度は画面に表示しやすいように変換します。
  横８ドット分（計4バイト)を１組にして、その４バイトが
     +0    +1    +2    +3  (バイト)
     P0 P1 P2 P3 P4 P5 P6 P7
だったとき、
    +0       +1       +2       +3     (バイト目)
    BBBBBBBB RRRRRRRR GGGGGGGG IIIIIIII  (1バイト中は左端がMSB, 右端がLSBです)
    01234567 01234567 01234567 01234567

のようにドットを分解してプレーンごとに集めます。
バッファにはこの４バイトの組がずらっと並ぶことになります。
  バッファ自体を書き換えるので、処理を楽にするため dopi 横サイズが8ドット
単位に制限しています^^;

  ちなみに、これは、手続き PiLd_Load4a と Gv_Cnv4a の処理です。

  256色画像のばあいは PiLd_Load8 で１ドットに１バイトでまず展開します。
  展開したデータを誤差拡散で１６色化したあと、Gv_Cnv8 でGv_Cnv4aと同様な１６
色４プレーンのデータに変換します（データは１６色になるので半分になります）



□

  あれもこれもと機能を加えていったので、ローダのくせして、40Ｋバイトもあり
ます。よけいな機能の塊ですので、Pi を知るにはこのDoPIのソースは不適です^^;
継ぎ接ぎだらけで、グローバル変数も多いし、デバッグ・ルーチンの埋め込も安易
にやってますし。とくに、キー入力やスクロールをサポートするうちにわけわやや
なもんになってしまいました。

  ＴＣのローカルな関数を使ってるので、ＴＣに依存します。当所はなるべく他のＣ
に変更しやすいようにしてましたが、ＴＣが用意してくれているのにわざわざつくる
のがめんどくさくなって挫折してしまいました。

  ぼくが dopi を作るときに勘違いしてつまづいたのは、処理上他の部分が２ドット
を１ピクセルにして処理しているのに対し、相対位置番号の 3, 4 の単位がドット単
位であるということでした。相対位置番号 3, 4 は、１ライン前の１ドット右、と、
１ライン前の１ドット左、という位置ですが、ぼくは、この部分も２ドット単位だと
思いこんでいたため、１ライン前の１ピクセル(２ドット) 右左と処理してしまい、
１ヶ月ほどつまづきました。

  あっと、DoPI はバグがあります^^;
  9801DA で200ﾗｲﾝ画像を表示したらちょっと乱れるんです。GDCの扱いに問題ある
ようです。が、GDCはよくわかってない... 今だに 200 ライン表示でのスクロール
方法分かってないし...まあ、虫連絡ないのをいいことに見なかったことにしている
のですが^^;



□  たわごと

　DoPI は、やなぎさわ氏配布のPi仕様書&pi.cを見てなんとなく自分でも分った
ような気がしてうれしくて、作ってみたくて作ってみたという、代物です。
でもって利用させていただいてたPi98(v0.57)のいくつかの不満を解消しようと。

  DoPI を作った当初の目標は、

  ・９８べったりのプログラムを作る。
    （もともと88VAのユーザで、pc98を使い初めてそうたってない頃だったので
      ９８べったりのプログラムの作り方の要領が全然わかってなかったのでと
      りあえず慣れようと思い）

  ・Pi98 より高速にする。
    （Ｃとアセンブラで作られてると書いてあったから、きっとスピード・アッ
      プの余地があるに違い無いと思い^^;... 実際はローダ部についてはほとん
      ど追い越せなかった...もっとも dopisv を作ってみたらそこそこ早かった
      のでどうやらPi98のセーバ部はどうやらＣのままっぽいけど）

  ・200ライン画像をちゃんと表示できるようにする。
    （Pi98のGDC関係の処理にどうも98DOでは不都合があるようで、200ライン表
    　示をすると画面がおかしくなったので）

  ・始点情報にちゃんと対応する。
    （Pi98は始点情報が拡張されてありがたいけど、連続表示をすると表示毎の
      始点位置の再設定が不十分で前の画像の始点から表示されたりしたので）

  ・PC98DO で可能な限り巨大な画像をロードし、でもってズリズリしたい。
    （せっかく Pi の仕様は可変サイズなのにPi98では640*800までしか表示で
    　きないので...）
    （98DOは拡張スロットが１つしかないのでHDを繋げるとそれで終わり。拡張
      メモリ等無理なので、メインメモリ一だけでなんとかしようと。メイン
      メモリだけでも640*400が３枚分は取れるんだから、結構な画像がロード
      できるだろうと... それ以上のサイズは表示できなくてもいいや、と）
    （DoPI作り初めたとき入手していたmag.exeが古いのしかなくて、EMSがない
      と横スクロールできないようだし(今のはできる)、magd.exeは横スクロー
      ル無いしで、Piに限らずメインメモリだけで横ｽｸﾛｰﾙできるローダが欲し
      かった、と）

  ・ズリズリは縦横ループできるようにする。
    （VAのPi(Mag)ローダがループできたのであたり前の機能に思えてたので、
      ぜひ98でもループしたかった...結構お気に入りの機能なのな）

  ・できれば２５６色もサポートする。
    （当初 Piの256色がぜんぜん普及してないことに気づいてなかった...
      もすこし使われてるものだと... もっと早く68K版のやなぎさわ氏のドキュ
      メント見てたらサポートなんてしなかったかも... まあ、今だって256色は
      十分な対応といいがたいけど）

  ・ズリズリでマウスに対応する（実現しなかった）
    （これもVAのPi,Magローダでは対応してるので、９８でもできるもんと思っ
      たので、、、９８では他のローダで対応してるのなさそうなので、忘れる
      ことにした^^;）

って感じでした。あと、mag->piコンバータを作ろうと漠然と思ってたよな...


  Ｃ使ってるし、不用な機能とか捨てなかった性もあって、なんか不必要に大きく
なってしまってますね。
　要らん機能捨てて、でもってもっと強化したPiローダを全汗で作り直そうかと
考えていたのですが、BERO氏作の pi.exe に出会い、その気は無くなってしまい
ました。

　pi.exe はすごいです。
　プログラム・サイズ小さいし、セーブもできるし、なんといっても速い。
　横１ドット単位で対応してるし、（DoPI と同じようにﾒｲﾝﾒﾓﾘだけで） 640*400
３枚分くらいの画像のズリズリできるし、横は1280まで大丈夫だし.

  正直なとこ pi.exe(その前身のpil.exe)にもう半年速くであってたら dopi は
作らなかったでせう。



　v1.04 の時点で最終版くらいのつもりでソースを一度公開しましたが、その後
諦めたつもりの 256 色に対応したしたので v1.04のソースはとりあえず削除し
てもらっていましたが、とりあえずこの v1.09 を最終版として、ソースを公開
することにしました。

　実とこ PC386M,P対応とか途中でほっぽってるし、なんやかんやでいじることが
あるでせうが、ま、とりあえず。

　v1.04のソース公開のときには新たにPiローダを作りたいとか書きましたが、
あきらめました。
　BERO氏作の pi.exe がすごいので作る直す必要がなくなった、と^^;。


  と、その pi.exe v0.22 のドキュメントで、

＞柳沢氏によるX68K版Pi.rには、以下の利点があります。(Pi.rのDOCより)
＞
＞(1)圧縮率が結構いいです。平均的に見ると有名な圧縮を殆どを上回ります。
＞(2)展開スピードが結構速い方です。
＞(3)資料が完全に公開されている。
＞(4)営利利用も自由です。
＞(5)Ｃで組み込む事が割と簡単。

＞しかしPC98版のPI98やDoPiでは、(2)〜(5)の利点が失われています。特に(3)〜(5)の
		　　　~~~~
＞点で、ＣＧをローダーと共に配布したり、自作ソフトに組込んだりすることができま
＞せん。このため、利用条件を68と等しくするために作成したのがこれです。

とDoPIの名前が出てて、ちょっと悲しく、反論したくてもほとんどその通りなので
（v1.04のソースは削除したあとだし^^;）、少しでも改善しようと、あわててこの、
v1.09のソースを公開したというわけです（もうちょっといじってから、と、思っ
てたらいつになるかわからんし）。

で、ちょっとコメント。
　(2) の展開速度に関しては、Pi98,DoPIともに "利点が失われた"と言われなければ
ならないほど遅い訳ではないと思う。主観の入る話だし、MAGローダに迫る展開速度
のpi.exeに比べれば遅いのは確かだけど。
　(3) についてはその通りですね。v1.04のソースを公開したことがあるとはいえ、
ゲリラ的に隠れて公開したし、消去しちゃったし、ｿｰｽの配布・使用を制限してたし。
今回だって隠れて公開だし^^;
　(4) は、配布条件を"非営利なら配布自由で、連絡不要" としか書かかなかったし、
不十分で不適格な表現なので受け止め方しだいだけど、本人としては、パソ通や手
渡しレベルの非営利再配布は連絡不要で自由、営利配布なら連絡（相談）ほしい、
で、同ソ組み込みは連絡くれるとうれしいけど、無断利用されても構わない、って
気でいた。　もちろん営利使用に関してはしていただいていい、ってつもりです。
ただフリーウェア（実はPDS）のAsm を使ってる負い目で営利については触れたく
なかったのであいまいにしました（営利は駄目なんだって思われたらそれわそれで
かまわない、と）（実はホントに営利に利用していいのかどうかわからない）。　
同ソ組み込みについては数件の問い合せがあり事情をいって使用するかどうかは相
手に判断してもらいました（同ソ利用されるのはウれしい）
  (5) は、ぜんぜんそのような使用を想定してなかったので、流用はそうそうでき
ないでせうね。使用言語のこともあるし。



□

  このソースはとりあえず無断転載可としますが、あまり気のりしません。

  （僕の作ったルーチンを）改造や引用したものを配布するばあいは、僕と同じ条件
にしてください。改造部の権利で作者や第三者の改造を邪魔したり 第三者のプログ
ラミングを邪魔するような主張や権利を行使するプログラムに引用することは不可
です（もち同ソ組み込みは可）。

							てんか☆（北村雅史）
							ニフティ  NBB00541
