submodule Pi
	import GH
	import Std
	import Pri
	import Subr
	import Deb
	import Str

@define GHT()	GH.T[ds:0]
//@define DEBUG()	0

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
cvar c256flg:b = 0
cvar bufPtr:w = 0
cvar bufBtm:w = 0
cvar gh_t:d = 0
cvar colTblSeg:w = 0


proc RdBitLoad(ght:d, bh, dx, ds)
enter
	save ax,cx,si
	ds.si = ght
	gh_t = ds.si
	bufPtr = ax = GHT.rdPtr
	bufBtm = ax = GHT.rdBufBtm
	colTblSeg = ax = GHT.piRcolTblSeg
	bh = GHT.piRrbcnt
	dx = GHT.piRrbdat
	ds = GHT.rdBufSeg
	return
endproc

proc RdBitSave(bh, dx)
enter
	save pusha,ds
	ds.si = gh_t
	GHT.piRrbcnt = bh
	GHT.piRrbdat = dx
	GHT.rdPtr    = ax = bufPtr
	GHT.rdBufBtm = ax = bufBtm
	return
endproc


proc RdBitSub(bh,dx)
//	バッファの終りで、ファイルより次のデータを読み込む
//		rep.inc
//	out cf,bh,dx
begin
  @if 0
	save ax
	push ds,bx
		ds.bx = gh_t
		GH.ReadB bx
	pop ds,bx
	dh = al
	dl = 0
    bh = 8
	|dx <<= 1
    return
  @else
	save si,ax
	si = bufPtr
	loop
		|si - bufBtm
		if (<)
			rep.load.w ax,si
			dh = al
			dl = ah
			bufPtr = si
			bh = 16
			|dx <<= 1
			return
		elsif (==)
			rep.load.b al,si
			dh = al
			dl = 0
			bufPtr = si
			bh = 8
			|dx <<= 1
			return
		fi
		push ds,bx
			ds.bx = gh_t
			GH.ReadBWDbuf bx
			//bufBtm = si = GHT.rdBufBtm
		pop  ds,bx
		si = 0
	endloop
  @fi
endproc


@define RdBit(x,y)\
	if (--bh != 0);\
		|dx <<= 1;\
	else;\
		RdBitSub bh,dx;\
	fi
	// x,y はダミー。dx,bh を指定するため。

proc RdLen(bh,dx)
//  長さ情報を１つ読み込む
//  in  ds  = %var
//  in  rep.inc
//  out ax.cx
begin
	ax = 0
	cx = 1
	RdBit(bh,dx)
	if (_nc_)
		return
	fi
	RdBit(bh,dx)
	if (_nc_)
		RdBit(bh,dx);  cx <<=. 1
		return
	fi
	RdBit(bh,dx)
	if (_nc_)
	 @if 0
		RdBit(bh,dx); cx <<=. 1	
		RdBit(bh,dx); cx <<=. 1	
	 @else
		if (bh > 2)
			bh -= 2
			|dx <<= 1;|cx <<=. 1	
			|dx <<= 1;|cx <<=. 1	
		else
			RdBit(bh,dx); cx <<=. 1	
			RdBit(bh,dx); cx <<=. 1	
		fi
	 @fi
		return
	fi
	RdBit(bh,dx)
	if (_nc_)
	 @if 0
		RdBit(bh,dx); cx <<=. 1	
		RdBit(bh,dx); cx <<=. 1	
		RdBit(bh,dx); cx <<=. 1	
	 @else
		if (bh > 3)
			bh -= 3
			|dx <<= 1;|cx <<=. 1	
			|dx <<= 1;|cx <<=. 1	
			|dx <<= 1;|cx <<=. 1	
		else
			RdBit(bh,dx); cx <<=. 1	
			RdBit(bh,dx); cx <<=. 1	
			RdBit(bh,dx); cx <<=. 1	
		fi
	 @fi
		return
	fi
	RdBit(bh,dx)
	if (_nc_)
	 @if 0
		RdBit(bh,dx); cx <<=. 1	
		RdBit(bh,dx); cx <<=. 1	
		RdBit(bh,dx); cx <<=. 1	
		RdBit(bh,dx); cx <<=. 1	
	 @else
		if (bh > 4)
			bh -= 4
			|dx <<= 1;|cx <<=. 1	
			|dx <<= 1;|cx <<=. 1	
			|dx <<= 1;|cx <<=. 1	
			|dx <<= 1;|cx <<=. 1	
		else
			RdBit(bh,dx); cx <<=. 1	
			RdBit(bh,dx); cx <<=. 1	
			RdBit(bh,dx); cx <<=. 1	
			RdBit(bh,dx); cx <<=. 1	
		fi
	 @fi
		return
	fi
	RdBit(bh,dx)
	if (_nc_)
		RdBit(bh,dx);  cx <<=. 1	
		RdBit(bh,dx);  cx <<=. 1	
		RdBit(bh,dx);  cx <<=. 1	
		RdBit(bh,dx);  cx <<=. 1	
		RdBit(bh,dx);  cx <<=. 1	
		return
	fi
	RdBit(bh,dx)
	if (_nc_)
		RdBit(bh,dx);  cx <<=. 1	
		RdBit(bh,dx);  cx <<=. 1	
		RdBit(bh,dx);  cx <<=. 1	
		RdBit(bh,dx);  cx <<=. 1	
		RdBit(bh,dx);  cx <<=. 1	
		RdBit(bh,dx);  cx <<=. 1	
		return
	fi

	push di
	cx = ax
	di = 1
	loop
		++cx
		RdBit(bh,dx)
	endloop (_c_)

	RdBit(bh,dx); 	di <<=. 1
	RdBit(bh,dx);	di <<=. 1
	RdBit(bh,dx);	di <<=. 1
	RdBit(bh,dx);	di <<=. 1
	RdBit(bh,dx);	di <<=. 1
	RdBit(bh,dx);	di <<=. 1
	loop
		RdBit(bh,dx)
		ax.di <<=. 1
	endloop (--cx)
	cx = di
	pop  di
	return
endproc


proc ReadColor(ax,bh,dx)
//	色データを１つ読み込む
//  arg al = 0〜15,ah = 0	bh,dx:RdDt.RdBit
//	out	ax  ,bh,dx
begin
	save cx,di //,si

	if (c256flg)
		ah = al
		al = 0
	else
		ah = 0
		al <<= 4
	fi
	di = ax

	block	//RdColPos
		RdBit(bh,dx)
		if (_c_)
			ax = 0
			RdBit(bh,dx);  ax <<=. 1	
			break.w
		fi
		ax = 1
		RdBit(bh,dx)
		if (_nc_)
			RdBit(bh,dx);  ax <<=. 1	
			break.w
		fi
		RdBit(bh,dx)
		if (_nc_)
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			break.w
		fi
		if (c256flg == 0)
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			break.w
		fi
		//256色時
		RdBit(bh,dx)
		if (_nc_)
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			break.w
		fi
		RdBit(bh,dx)
		if (_nc_)
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			break.w
		fi
		RdBit(bh,dx)
		if (_nc_)
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			break.w
		fi
		RdBit(bh,dx)
		if (_nc_)
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			RdBit(bh,dx); ax <<=. 1	
			break.w
		fi
		RdBit(bh,dx); ax <<=. 1	
		RdBit(bh,dx); ax <<=. 1	
		RdBit(bh,dx); ax <<=. 1	
		RdBit(bh,dx); ax <<=. 1	
		RdBit(bh,dx); ax <<=. 1	
		RdBit(bh,dx); ax <<=. 1	
		RdBit(bh,dx); ax <<=. 1	
	endblock
	cx = ax
@if defined(DEBUG)
	Deb.Chk
	if (==)
		Pri.Fmt "Cn %d\N",cx
	fi
@fi
	push ds
		ds = colTblSeg
		di += cx
		al = b[di]
		if (cx)
			push es,si
				es = si = ds
				si = di
				--si
				rep.dec
				rep.cpy di,si,cx
				rep.inc
				b[di] = al
			pop  es,si
		fi
	pop  ds
	return
endproc

//-----------------------------------------------------------------------------
/*
	0 F E D C B A 9 8 7 6 5 4 3 2 1
	1 0 F E D C B A 9 8 7 6 5 4 3 2
	2 1 0 F E D C B A 9 8 7 6 5 4 3
	3 2 1 0 F E D C B A 9 8 7 6 5 4
	4 3 2 1 0 F E D C B A 9 8 7 6 5
	5 4 3 2 1 0 F E D C B A 9 8 7 6
	6 5 4 3 2 1 0 F E D C B A 9 8 7
	7 6 5 4 3 2 1 0 F E D C B A 9 8
	8 7 6 5 4 3 2 1 0 F E D C B A 9
	9 8 7 6 5 4 3 2 1 0 F E D C B A
	A 9 8 7 6 5 4 3 2 1 0 F E D C B
	B A 9 8 7 6 5 4 3 2 1 0 F E D C
	C B A 9 8 7 6 5 4 3 2 1 0 F E D
	D C B A 9 8 7 6 5 4 3 2 1 0 F E
	E D C B A 9 8 7 6 5 4 3 2 1 0 F
	F E D C B A 9 8 7 6 5 4 3 2 1 0
*/


//cvar colTblSeg:w = 0
cvar colTblSzs:w = 0

@if 0
*proc Df_ColTbl (coltSeg:w, szs:w);cdecl
enter
	save ax
	colTblSeg = ax = coltSeg
	colTblSzs = ax = szs
endproc
@fi

@if 0
*proc GetColTblBuf(bx)
enter
	if (GHT.pln == 4)
		cx = 0x10
	else
		cx = 0x1000
	fi
	ax = cx
	GH.GetMem bx,ax,cx
	return
endproc
@fi

proc InitColTbl(bx,ax, cl)
//	色表(16色*16通り) の初期化
//	in	rep.inc
begin
	save pusha,es

	if (ax == 0)
		if ((cl/*GHT.pln*/ != 4 && colTblSzs < 0x1000) || colTblSeg == 0)
			Subr.PriExit "Piの色表のためのメモリが足りない\N"
		fi
		ax = colTblSeg
	fi
	es = ax
	di = ax = 0
	if (cl/*GHT.pln*/ == 4)
		bx = 16
		loop
			cx = 16
			loop
				al &= 0x0f
				rep.set di,al
				//Deb.Chk
				//if (==)
				//	Pri.Fmt "%02x ",ax
				//fi
				--al
			endloop (--cx)
			//Deb.Chk
			//if (==)
			//	Pri.Cr
			//fi
			++al
		endloop (--bx)
	else
		bx = 256
		loop
			cx = 256
			loop
				rep.set di,al
				//Deb.Chk
				//if (==)
				//	Pri.Fmt "%02x ",ax
				//fi
				--al
			endloop (--cx)
			//Deb.Chk
			//if (==)
			//	Pri.Cr
			//fi
			++al
		endloop (--bx)
	fi
	return
endproc


//-----------------------------------------------------------------------------

*proc InitRead(ght:d);cdecl
enter
	save pusha,es

	Deb.Chk;if (==);Pri.Fmt "Pi.InitRead\N";fi
	// 変数初期化
	ds.bx = ght
	ax = GHT.blkLin
	if (ax < 2)
		Subr.PriExit "展開のためのバッファのサイズが小さい\N"
	fi

	//比較のための相対値を求める
	ax = GHT.sizeX
	GHT.piRofs(1-1) = ax
	dx = ax
	dx += ax	//dx <<= 1
	GHT.piRofs(2-1) = dx
	//ax = GHT.sizeX
	--ax
	GHT.piRofs(3-1) = ax
	ax += 2
	GHT.piRofs(4-1) = ax

  //Pri.Fmt "--- pos\N"
	// 最初の相対位置番号とその長さを設定
	GHT.piRpos = -1
	GHT.piRlen = 0
	// rbcnt, rbdat の初期化
	GHT.piRrbcnt = 1
	GHT.piRrbdat = 0

	//
	c256flg = 0
	if (GHT.pln == 8)
		c256flg = 1
	fi
	// 色表のバッファを確保	Pi.GetColTblBuf bx
	if (GHT.pln == 4)
		cx = 0x10+1
	else
		cx = 0x1000+1
	fi
	ax = cx
	GH.GetMem bx,ax,cx

	if (ax)
		GHT.piRcolTblSeg = ax
		GHT.piRcolTblSzs = cx
	fi
  //Pri.Fmt "--- GetColTbl %04x  sz:%04x\N",ax,cx
	/*Pi.*/InitColTbl bx, ax, GHT.pln

	// １番左上のピクセルを取り出して、仮想上の前２ラインを塗りつぶす
  //Pri.Fmt "--- HisLin\N"
	push ds,bx
		RdBitLoad ght, bh, dx, ds
		ax = 0
		ReadColor ax, bh, dx	//in ax 左側の色  result ax
		cl = al
		ReadColor ax, bh, dx
		RdBitSave bh, dx
	pop ds,bx
	ah = al
	al = cl
  @if 0
	es.di = ww ( GHT.pdbSeg, GHT.hisSiz )
	cx = GHT.sizeX
	cx <<= 1	//cx *= 2
	if (di > cx)
		di -= cx
	else
		di = 0
	fi
	cx = GHT.sizeX
  //Pri.Fmt "--- hisLin2 %04x  %08lx %u\N", ax, es.di, cx
	rep.set.w di,ax,cx
  @else
	//es.di = ww ( GHT.pdbSeg, GHT.blkSiz)
	//cx = GHT.hisSiz
	//|cx >>= 1;cx +=. 0
	//rep.set.w di,ax,cx

	es.di = ww ( GHT.pdbSeg, 0)
	cx = GHT.pdbSiz	//cx = GHT.hisSizO	//cx = GHT.hisSiz
	cx >>= 1	//GHT.pdbSizは16の倍数
	
  @if 0
	//奇数桁対策...これでいいのかは不明^^;
	if (GHT.x8mode)
		dx = GHT.startXofs
		dx += GHT.endXofs
		if ((dx & 0x01) == 0)
			if (GHT.endXofs & 0x01)
				ah <=> al
			fi
		else
			if (GHT.endXofs & 0x01 == 0)
				ah <=> al
			fi
		fi
    fi
  @fi
	//PDBバッファを埋めちゃう
	rep.set.w di,ax,cx
	
	//奇数桁対策...これでいいのかは不明^^;
	GH.ResizePDBw ds.bx
	GH.RngX1 ds.bx
  @fi
	return
endproc


*proc ReadPDB(ght:d, linCnt:w);cdecl
//  Piファイルよりデータを読み込んで展開
enter
	save pusha,es,ds
	local ofs1:w, ofs2:w, ofs3:w, ofs4:w
	local endadr:w, len:d, exitflg:b, posZflg:b

	ds.si = ght
	posZflg = 0
	len = 0
	c256flg = 0
	if (GHT.pln == 8)
		c256flg = 1
	fi
	dx.ax = linCnt * GHT.sizeX
	ax += GHT.hisSiz
  @if 1
	++ax
	ax &= ~1
  @fi
	endadr = ax										//展開バッファの最後
	es.di = ww(GHT.pdbSeg, GHT.hisSiz)			//展開バッファのアドレス
	
	//位置番号1〜4 のオフセット値を設定
	ofs1 = ax = GHT.piRofs(1-1)
	ofs2 = ax = GHT.piRofs(2-1)
	ofs3 = ax = GHT.piRofs(3-1)
	ofs4 = ax = GHT.piRofs(4-1)
	Deb.Chk;if (==);Pri.Fmt "PiR:ofs %d,%d,%d,%d\N",ofs1,ofs2,ofs3,ofs4;fi
	exitflg = 0						//終了判定用
	bl    = GHT.piRpos			//前回の位置番号
	ax.cx = GHT.piRlen			//前回の長さ
	GHT.piRlen = 0

	Deb.Chk;if (==);
		push ax,bx
		ax = 0; al = GHT.piRrbcnt ; Pri.Fmt "[[[bh=%02x dx=%04x]\N", ax, GHT.piRrbdat;
		bh = 0;Pri.Fmt "[[[Pos = %x len=%ld]]]\N", bx, GHT.piRlen;
		Pri.Fmt "[[[ptr=%x btm=%x]]]\N", bufPtr, bufBtm;
		pop  ax,bx
	fi


	//DS を入力バッファに合わせるから GH.Tとかのアクセス時は注意してね
	RdBitLoad ght, bh, dx, ds

	// 前回の続きかどうか
	go.w (bl == 0x80) CONT_COL					//色展開ループの続きへ
	if (bl == 0x62 || bl == 0x64)				//前回がPos=0の場合
		si = endadr;	si -= di;	si >>= 1;	//バッファの最後までの空きサイズを求める
		if (ax || cx >= si)
			ax.cx -= ww(0,si)
			len = ax.cx
			cx = si
			exitflg = 1
		fi
		ax = w[es:di - 2]
		if (bl == 0x62)
			bl = 0
			if (len.h || len.l)
				posZflg = 0x62
				go.w ZERO_2
			fi
			go.w (cx) ZERO_2
		else
			bl = 0
			if (len.h || len.l)
				posZflg = 0x64
				go.w ZERO_4
			fi
			go.w (cx) ZERO_4
		fi
	else
		go.w (bl != -1 && (ax || cx)) CONT	//複写の続きへ
	fi


	//メイン・ループ
	loop.w
  NEXT:
		//位置番号 0-4 を入力(al)
		block RDPOS	//RdPos  //result ax
			ax = 0
			RdBit(bh,dx); ax <<=. 1
			RdBit(bh,dx); ax <<=. 1
			if (al == 3)
				RdBit(bh,dx)
				al +=. 0//adc al,0
			fi
		endblock
		//前回の位置と同じなら色展開のループへ移行
		if (al == bl)
			bl = 0x80
			loop
				al = b[es:di - 1]
				ReadColor ax, bh, dx	//result ax
				cl = al
				ReadColor ax, bh, dx	//result ax
				ah = al
				al = cl
				rep.set.w di,ax
			@if defined(DEBUG)
				Deb.Chk
				if (==)
					Pri.Fmt ".%04x\N", ax
				fi
			@fi
				go (di >= endadr) COL_LOOP_E
  CONT_COL:
				RdBit(bh,dx) //result cf
			endloop (_c_)
			go.w NEXT	//色展開のループ終了
		  COL_LOOP_E:
			//バッファがいっぱいになったので一旦終了
			if (di > endadr)
				Deb.Chk;if(==);Pri.Fmt "pi展開(col)でポインタがおかしい\N";fi
			fi
			len = 0
			break.w
		fi

		// 今回の位置番号を設定
	@if defined(DEBUG)
		Deb.Chk; if (==); Pri.Fmt "@%d", ax ; fi
	@fi
		bl = al
		//	長さを読み込む
		RdLen bh,dx  //result ax.cx

	@if defined(DEBUG)
		Deb.Chk; if (==); Pri.Fmt " %ld\N", ax.cx; fi
	@fi

  CONT:								//前回からの続き

		//バッファの最後までの空きサイズを求める
		si = endadr
	@if defined(DEBUG)
		if (di > si)
			Deb.Chk;if(==);Pri.Fmt "pi展開(pos,len)でポインタがおかしい\N";fi
			//di = endadr
		fi
	@fi
		si -= di
		si >>= 1
	
		//展開する長さが空きサイズよりも長いとき, 次回の準備をして、脱出用意
		if (ax || cx >= si)	
			ax.cx -= ww(0,si)
			len = ax.cx
			Deb.Chk
			if(==)
				push bx
					bh = 0
					Pri.Fmt "  next Pos %d  len %ld\N", bx, ax.cx
				pop  bx
			fi
			cx = si
			exitflg = 1
			break.w(cx == 0)
			if (bl == 0 && (len.h || len.l))
				posZflg = 0x62
				ax = w[es:di - 2]
				if (al != ah)
					posZflg = 0x64
					go ZERO_4
				fi
				go ZERO_2
			fi
		fi
	
		if (bl == 0)	//位置番号 0のとき
			ax = w[es:di - 2]
			if (al != ah)
			  ZERO_4:
				si = w[es:di - 4]
				if ((cx >>= 1) _c_ 1)
					ax <=> si
					rep.set.w di,ax
				fi
				if (cx)
					loop
						w[es:di] = si
						di+=2
						rep.set.w di,ax
					endloop (--cx)
				fi
				continue.w
			fi
		  ZERO_2:
		    rep.set.w di,ax,cx
			continue.w
		else			//位置番号 1〜4のとき
			block
				|bl - 2
				go(.>.) OFS34
				go(.<.) OFS1
				ax = ofs2
				break
			OFS34:
				if (bl == 3)
					ax = ofs3
					break
				fi
				ax = ofs4
				break
			OFS1:
				ax = ofs1
			endblock
			push ds
				ds = si = es
				si = di
				si -= ax
				rep.cpy.w di,si,cx
			pop  ds
		fi
	endloop (exitflg == 0)
	si = endadr
	if (di > si)
		Deb.Chk;if (==);Pri.Fmt "pi展開でポインタがおかしい\N";fi
	fi

  @if defined(DEBUG)
	Deb.Chk;if (==);Pri.Fmt "bx = %04x  dx = %04x\N",bx,dx;fi
  @fi
	ds.si = ght
	GHT.piRpos = bl
	if (bl == 0)
		GHT.piRpos = al = posZflg
	fi
	GHT.piRlen = cx.ax = len

	Deb.Chk;if (==);
		ax = 0; al = bh; Pri.Fmt ">>[bh=%02x dx=%04x]\N", ax, dx;
		ax = 0; al = GHT.piRpos; Pri.Fmt ">>[Pos = %x len=%ld]\N", ax, GHT.piRlen;
		Pri.Fmt ">>[ptr=%x btm=%x]]]\N", bufPtr, bufBtm;
	fi

	RdBitSave  bh, dx
	ax = 0
 RTS:
	return
 ERR:
	ax = 1
	go RTS
endproc

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
cvar userLinFlg:w = 0	//コメントの１行目をユーザ名としてあつかうかのフラグ
cvar rbcnt:b,rbdat:w
cvar exAreaFlg:w = 0
cvar apicgFlg:w = 0

*proc Df_ExAreaFlg (flg:w);cdecl
enter
	save ax
	exAreaFlg = ax
	return
endproc

*proc Df_UserLinFlg (flg:w);cdecl
enter
	save ax
	userLinFlg = ax
	return
endproc

*proc Df_ApicgFlg (flg:w);cdecl
enter
	save ax
	apicgFlg = ax
	return
endproc

*proc InitR(ght:d);cdecl
enter
	save ax,ds,bx
	ds.bx = ght
	GH.SetHisLin bx,2
	GHT.fmtR = GH.PI
	return
endproc

proc GetUserName(bx)
//	arg si	pointer to GH.T
//	in  ds  = %var
enter
	save pusha,es,sav_ds:ds
	cvar user:b() = "User:"

	es.di = GHT.comment
	go.w (b[es:di] == '\0') RET
	go (userLinFlg) J1
	push ds
		ds = cs
		repe.cmp di,&user,5
	|pop ds
	if (==)
  J1:
		GH.GetMem bx, 2,2
		cx.si = es.di
		es.di = ww(ax,0)
		ds = cx
		cx = 0
		loop
			rep.load al,si
			break(al == '\0'|| al == 0x1a|| al == '\r'|| al == '\n')
			continue (cx >= 31)
			rep.set  di,al
			++cx
		endloop
		if (al == '\r' && b[si] == '\n')
			++si
		fi
		if (al == 0)
			--si
		fi
		rep.set di,0
		ds = sav_ds
		if (cx)
			GHT.userName    = ww(es,0)
			GHT.userNameLen = cx
			GHT.userNameSiz = 32
		fi
		es.di = GHT.comment
		ds = es
		Str.Cpy es.di, si
		Str.Len si
		ds = sav_ds
		GHT.commentLen = cx
	fi
 RET:
	return
endproc

proc SetDfltPal256(es.di)
begin
	save pusha

	dh = 0
	loop	//G
		dl = 0
		loop	//R
			ah = 0
			loop	//B
				al = dl; if (al); al |= 0x1f; fi	//R
				rep.set di,al
				al = dh; if (al); al |= 0x1f; fi	//G
				rep.set di,al
				al = ah; if (al); al |= 0x3f; fi	//B
				rep.set di,al
				ah += 64
			endloop (ah)
			dl += 32
		endloop (dl)
		dh += 32
	endloop(dh)
	return
endproc

proc GetPal256(es.di)
begin
	save pusha
	cx = 256
	loop
		GH.ReadB bx
		rep.set di,al
		GH.ReadB bx
		rep.set di,al
		GH.ReadB bx
		rep.set di,al
	endloop (--cx)
	return
endproc

cvar dfltPalRGB:b(16*3) = data	// 省略時の16色パレット
	b	   0,   0,   0
	b	   0,   0,0x70
	b	0x70,   0,   0
	b	0x70,   0,0x70
	b	   0,0x70,   0
	b	   0,0x70,0x70
	b	0x70,0x70,   0
	b	0x70,0x70,0x70
	b	   0,   0,   0
	b	   0,   0,0xf0
	b	0xf0,   0,   0
	b	0xf0,   0,0xf0
	b	   0,0xf0,   0
	b	   0,0xf0,0xf0
	b	0xf0,0xf0,   0
	b	0xf0,0xf0,0xf0
enddata

*proc Open(ght:d, fname:d);cdecl
	// Pi のヘッダを読み込む
	// arg si	GHへのポインタ
	// arg dx	ファイル名
	// out ax	エラーコード   0:Ok  1:Piでない  2:ヘッダの値がおかしい
enter
	save bx,cx,dx,si,di,es,ds
	local palMode:b
	local hdnCmt:b(34)
	cvar fmt:b() = "PI"

	ds.bx = ght

	//format name
	GHT.rdFmtName = dx.ax = ww(cs,&fmt)
	//GHT.fmtR = GH.PI

	//ファイル・オープン
	GH.Open bx,fname
	
	GH.InitReadBWD bx, 0x200,0xF000
	GHT.rdMode = 1

	// 'Pi'チェック
	GH.ReadW bx
  @if 1	// MACヘッダ対策
	if (ax != 'P'*0x100 + 'i')
		cx = 128/2
		loop
			GH.ReadW bx
		endloop(--cx)
		go.w (ax != 'P'*0x100 + 'i') HDR_ERR
	fi
  @else
	go.w (ax != 'P'*0x100 + 'i') HDR_ERR
  @fi

	// コメント取得
	GH.GetMem bx,0x5,0xfff
	es.di = ww(ax,0)
	GHT.comment = ax.di
	cx <<= 4
	GHT.commentSiz = cx
	cx -= 1
	GHT.commentLen = 0
	loop
		GH.ReadB bx
		break (al == 0x1a)
		continue (cx == 0)
		continue (al == '\0')
		rep.set di,al
		--cx
		++GHT.commentLen
	endloop
	if (cx == 0)
		Pri.Fmt "コメントが長すぎたので途中で切りました\N"
	fi
	b[es:di] = '\0'
	cx = GHT.commentLen
	cx += 1
	Std.ParaSize cx,ax
	GH.ResizeMem bx, es, cx
	cx <<= 4
	GHT.commentSiz = cx /*0?*/
	if (cx)
		GetUserName bx
	else
		GHT.comment = 0
	fi

	// ダミーコメント
	es.di = ww(ss, &hdnCmt)
	w[es:di] = 0
	cx = 0
	loop
		GH.ReadB bx
		if (cx < 10)
			++cx
			rep.set di,al
		fi
	endloop (al)
	b[es:di] = 0
	di = &hdnCmt
	dx.ax = d[es:di]
	if (al == '-')
		if (ah == 'm' && dl == 'a' && dh == 'g')
			push ds.si
				ds.si = es.di
				si += 4
				Str.HtoL si
			pop  ds.si
			GHT.magMacNo = dl
			GHT.magMacFlg = ah
			GHT.magScrnMode = al
		fi
	fi

	// palMode,dotX,dotY,plnCnt を拾得
	GH.ReadB bx;  palMode = al
	if (al & 0x80)
		GHT.piDfltPalFlg = 1
	fi
	GH.ReadB bx;  GHT.asp1 = al
	GH.ReadB bx;  GHT.asp2 = al
	GH.ReadB bx;  GHT.pln  = al
	GHT.col = 16
	if (al == 8)
		GHT.col = 256
	else
		go.w (al != 4) VAL_ERR
	fi
	
	// セーバ機種名を取得
	GH.ReadB bx;  GHT.macName(0) = al
	GH.ReadB bx;  GHT.macName(1) = al
	GH.ReadB bx;  GHT.macName(2) = al
	GH.ReadB bx;  GHT.macName(3) = al
	GHT.macName(4) = 0

	// 機種依存データの処理
	GH.ReadW bx
	cx = ax
	GHT.piExSiz = ax
	GHT.startX = 0
	GHT.startY = 0
	if.w (exAreaFlg==0)//拡張領域のデータを取得
		loop.w (cx >= 5)
			--cx
			GH.ReadB bx
			if (al == 0x01)	/* 始点 */
				GH.ReadW bx;	GHT.startX = ax
				GH.ReadW bx;	GHT.startY = ax
				cx -= 4
			elsif (al == 0x02)	/* 透明色 */
				GH.ReadW bx
				GH.ReadW bx
				++ax
				GHT.bakCol = ax
				cx -= 4
			elsif (al == 0x03)	/* パレットの有効ビット数 */
				GH.ReadW bx
				GH.ReadW bx
				GHT.palBit = ax
				cx -= 4
			elsif (al == 0x04)	/* パレットの使用個数 */
				GH.ReadW bx
				GH.ReadW bx
				GHT.palCnt = ax
				cx -= 4
			elsif (al <= 0x1f)
				GH.ReadW bx
				GH.ReadW bx
				cx -= 4
			elsif (al == 'A' && apicgFlg)	//APICG(X68K)でセーブされた PI対策
				push cx
					GH.GetMem bx, 2,2
				pop  cx
				es.di = ww(ax,0)
				dx = 0
				loop
					GH.ReadB bx
					--cx
					break (al == 0)
					rep.set di,al
					++dx
				endloop (dx<18 && cx)
				if (dx)
					GHT.userName = ww(es,0)
					GHT.userNameSiz = 32
					GHT.userNameLen = dx
				fi
			elsif (Std.IsAlpha(al))
				break (cx < 5)
				GH.ReadB bx	//TAG 2
				GH.ReadW bx	//TAG 3,4
				cx -= 3
				GH.ReadW bx	//ax=ｻｲｽﾞ
				cx -= 2
				break (cx == 0 || ax >= cx)
				cx -= ax
				if (ax)
					dx = ax
					loop
						GH.ReadB bx
					endloop (--dx)
				fi
			else
				break
			fi
		endloop
	fi
	if (cx)	// 残りの機種依存データを読み飛ばす
		loop
			GH.ReadB bx
		endloop (--cx)
	fi

	// 画像サイズ(X*Y)を拾得
	GH.ReadW bx;	GHT.sizeX = ax; go.w (ax == 0) VAL_ERR
	ax += GHT.startX
	--ax
	GHT.endX = ax
	GH.ReadW bx;	GHT.sizeY = ax; go (ax == 0) VAL_ERR
	ax += GHT.startY
	--ax
	GHT.endY = ax

	// パレットを拾得
	GH.GetPalBuf bx
	rep.inc
	es.di = GHT.rgbPal
	if (GHT.pln != 8)
		if (palMode & 0x80)
			push ds
				ds = cs
				si = &dfltPalRGB
				rep.cpy.w di,si,48/2
			pop  ds
		else
			ah = 16*3
			loop
				GH.ReadB bx
				rep.set di,al
			endloop (--ah)
		fi
	else
		if (palMode & 0x80)
			SetDfltPal256 es.di
		else
			GetPal256 es.di
		fi
	fi

	//座標調整, pdbバッファ取得
	GH.InitPDB ds.bx

	//入力関係の初期化
	if (GHT.hdrRdFlg == 0)
		InitRead ds.bx
	fi

	// エラー無し
	ax = 0
RTS:
	return

HDR_ERR:
	Pri.Fmt "Piのヘッダでない\N"
	ax = 1
	go RTS
VAL_ERR:
	Pri.Fmt "ヘッダに矛盾がある\N"
	ax = 2
	go RTS
endproc

@if 1
*proc CloseR(GHTptr:d);cdecl
enter
	save bx,ds,ax
	ds.bx = GHTptr
	Subr.Close GHT.rdHdl
	return
endproc
@fi


///////////////////////////////////////////////////////////////////////////////

endmodule
