□  画像ファイルより、パレット・データをぬきだす

      画像ファイルがあって、ローダもあるけど、圧縮率が悪かったりロー
    ダの展開速度が遅かったりそんなことぬきにしても日頃使っているロー
    ダに会わせたかったりして、画像をコンバートしたいばあいがあります。

    そんなとき９８を使っていて困るのはパレット・データをどうするか、
    ということです。ローダがパレット・ファイルを作成してくれたり、常
    駐パレットに対応してくれたりしているとよいのですが、そうでない場
    合は困ってしまいます  （デジタル・パレットとか、すでにパレット・
    ファイルがあるばあいは困りませんが^^;）。
    
      こういうばあい、trcpal(NCC-1701A氏作) 等のパレット・トレーサを
    使えばパレット・データを抜き出すことができますが、枚数が多いとた
    いへんですし、パレット・データの抜きだしに失敗することもあります。

      ところで画像を表示するにはパレット・データがどこかにあるはずで
    す。おそらく画像ファイルにあるかローダ本体にあるか別のデータ・フ
    ァイルとしてあるしょう。

      もし、画像ファイルを覗いてみてパレット・データらしきものがみつ
    かったばあい、パレット・トレーサを使わずに直接画像ファイルからパ
    レット・データをぬきだそう、というのが、この prgb です。
    （ローダ本体にあるばあいはややこしいので、あきらめるなり工夫する
    なりしてください^^;）

      パレット・データですが、prgb では１色は RGB で表されそれが１６
    個、順に並ひんだものを対象にします。また R,G,Bの各明度は 4ビット
    が有効です。パレットの表し方はRGB 以外もありますがサポートしてい
    ません。
      でも、９８のI/O がその形式なので、画像フォーマットを決めるほう
    にしたら、RGB で 0番〜15番まで素直に並べるほうが手間がかからずに
    すむので結構このタイプで格納されていると思います。パレットを一部
    固定して16個ないとか順番に並んでないとかも、ありえますが、そうな
    いですし、もしそういうときはあきらめて別の手段を探してください。
      
      
      RGB*16のみにしましたが、それでもこの条件に当てはまる実際の格納
    方法はいくつかあります。

    1 R,G,B それぞれに 1バイト用意しその下位 4ビットに値を設定、それ
      が16個ならんだもの（3 * 16 = 48バイト）
      RGBパレット・ファイルと同じようなタイプ

    2 R,G,B それぞれに 1バイト用意し, 8ビットで表され(実際には上位 4
      ビットを使用する)、それが16個ならんだもの（3 * 16 = 48バイト）
      Mag や Pi のタイプ。X68Kなどのより多彩な色を表せる。が、PC98で
      は下位 4ビットをすべてオフにしたり（0x0）、セットしたり（0xf. 
      ただし、上位４ビットが 0なら下位も 0）されている。
    
    3 R,G,B 12(=4*3)ビットを0000RRRRGGGGBBBBのように１ワード(2バイト)
      で表し、それが16個ならんだもの（2 * 16 = 32 バイト）。
      また、１ワードの表し方にはインテル形式（下位バイトが抵いアドレ
      スに置かれる）、モトローラ形式（下位バイトが高いアドレスに置か
      れる）がある。
      余った４ビットの各ビットが 0 か 1 かは不定だが、たいていは４ビ
      ットとも同じ（０か１）にしてあると思う。
      １６ビットに R,G,B各４ビットをどのように配置するかももちろん、
      いろいろあるので、RRRR0GGGG0BBBB00 とかやられると見た目にわか
      りにくいので、見つけることはできないでせう。
 
     また、R,G,B と書いてきましたが実際の順番は G,R,B とか B,R,G とか
    もありどれかに決まっているわけではありません。が、R,G,B の組み合
    せはたかだか６通りしかないので、たいしたことではありません。
 
   
      実際に画像ファイル中のパレット・データを探すには、画像ファイル
    を dump 等でダンプしてみて、上のパターンに当てはまるかを調べます。

    上のパターン以外にも、パレット・データはだいたいファイルの最初の
    ほうにあるか、一番後ろにあるかで、中間にあることはまずないでしょ
    うし、また絵によりますが人の描いた絵はパレット０の RGB が 0,0,0、
    パレット15のRGB が 15,15,15 になっていることは多いと思いますので
    見つかるなら、結構すぐに見つかります。


      いくつかの画像ファイルを覗いてパレット・データらしいデータを見
    つけたなら、その位置を覚えておき、１つ画像を表示します。

      画像を表示した状態で、prgbに画像ファイル名とそのパレット・デー
    タの位置(-lオプション) 、パレット・データの形式(-mオプション)、
    それにとりあえずRGBの順番を RGBだとして -x0 を与えて起動します。

      例として、ここでは、拡張子が .GGG でパレットの位置がファイルの
    先頭より16バイト目、格納形式は上のパターンの 2の画像ファイルで、
    表示したファイル名を c1.ggg とすると、
        prgb -l16 -m1 c1.ggg -x0
    となります。

    （画像を表示した状態でこまごまとしたオプションつきでコマンドを入
      力するのはたいへんなのでとりあえず、表示したあと、prgb -i -vを
      実行しとくといいでせう（デジタルな１６色でトーンを50%にする）
      ezkeyを組み込んでいれば CTRL+GRPH+D でGVRAMのon/offができるの
      でもっと楽かも）

      実行後、色がちゃんとしていればok. RGBの順番はそのままRGB だっ
    たということになります。もしちがえば変になるので、そうであれば、
    今度は -x0 の代わりに-x1 を指定して
        prgb -l16 -m1 c1.ggg -x1
    を実行してみます。もし合えばRGBの順番は BRGだったことになります。
    違えば今度は -x2 にして... で -x5 まで試します。もし、色が合わな
    ければ、指定した位置のデータはパレットでないということになります。

    たかだか６通りなので、うまくいっても取り敢えず６回とも行なってみ
    たほうが無難でせう。
    （ksh や history, doskey 等のヒストリーを組み込んでいれば、この
      手の入力は楽ですね^.^）

      ２回目以後の指定でファイル名を忘れないように気を付けてください。
    prgb 自体は常駐パレットがあればファイル名がないばあい常駐パレッ
    トに対して操作を行なうので、２回目からはファイルなしで指定しても
    いいように思えるかもしれませんが、正確には -x はRGB の順番を入れ
    換えるだけで当然常駐パレットも入れ換わるのです。


      あとは、prgb に求めたオプションをあたえ、-rオプションでRGBファ
    イルでも作成して（prgb -l16 -m1 -x1 -r *.ggg）、ローダとセーバを
    交互に起動して mag  なり pi なり q4 なりにコンバートしませう。
    （かんちゃん☆ﾐ氏作 toany や 拙作 cgldsvを使うと楽でせう）

    と。せっかく見つけた値は、メモしておくついでにオプション・ファイ
    ルにしておくと便利です。例の場合は、
      -----------------------------------------------------------
        # GGG画像ファイルのパレット
        -eGGG -l16 -m1 -x1
      -----------------------------------------------------------
    の二行（1行目は単なるコメント）を GGG というファイルにしておけば
        prgb @ggg -r *
    で、rgb ファイルの作成ができます。



□
                                                            てんか☆
